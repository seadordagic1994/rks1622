@model CondorExtreme3.Areas.Local.Models.GraphDataVM

<div class="box box-success">
    <div class="box-header with-border">
        <h1 class="box-title">@Model.AnalysisName</h1>

        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>

        </div>
    </div>
    <div class="box-body" id="varDiv">
        <div class="chart">
            <canvas id="pieChart" style="height:230px"></canvas>
        </div>

       
    </div>
    <!-- /.box-body -->
</div>
@*<script>
    $(function () {

          //-------------
          //- PIE CHART -
          //-------------
          // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
        var pieChart = new Chart(pieChartCanvas);
        var PieData = [
          {
              value: 700,
              color: "#f56954",
              highlight: "#f56954",
              label: "Chrome"
          },
          {
              value: 500,
              color: "#00a65a",
              highlight: "#00a65a",
              label: "IE"
          },
          {
              value: 400,
              color: "#f39c12",
              highlight: "#f39c12",
              label: "FireFox"
          },
          {
              value: 600,
              color: "#00c0ef",
              highlight: "#00c0ef",
              label: "Safari"
          },
          {
              value: 300,
              color: "#3c8dbc",
              highlight: "#3c8dbc",
              label: "Opera"
          },
          {
              value: 100,
              color: "#d2d6de",
              highlight: "#d2d6de",
              label: "Navigator"
          }
        ];
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: "#fff",
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: "easeOutBounce",
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
        };
          //Create pie or douhnut chart
          // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions);


    });
</script>*@
<script>
    $(function () {

        var resultsJSON = JSON.parse('@Html.Raw(Model.Results)');



        var dataLength = resultsJSON.length;
        if (dataLength == 0) {
            $("#graphWrapper > div").css("display", "none");

            $("#graphWrapper").append('<div class="alert alert-danger alert-dismissible">\
                    <h4><i class="icon fa fa-ban"></i> Alert!</h4>\
                    There is no data which corresponds to the given parameters.\
                  </div>');
            var lnPrev = $("#allFiltersPa").css("max-width");
            $("#graphWrapper > div").css("max-width", lnPrev);
        }
        else {
            
            var lnPrev = $("#allFiltersPa").css("max-width");
            $("#graphWrapper").css("max-width", lnPrev);

            var PieData = resultsJSON;
            
            var pieChartCanvas = $("#pieChart").get(0).getContext("2d");

            var pieChart = new Chart(pieChartCanvas);


            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 50, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: "easeOutBounce",
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
            };
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            pieChart.Doughnut(PieData, pieOptions);

            //else
        }

    });
</script>