@model CondorExtreme3.Areas.Local.Models.GraphDataVM

<div class="box box-success">
    <div class="box-header with-border">
        <h1 class="box-title">@Model.AnalysisName</h1>

        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
            
        </div>
    </div>
    <div class="box-body" id="varDiv" >
        <div class="chart">
            <canvas id="barChart" style="height:230px"></canvas>
        </div>

        
    </div>
    <!-- /.box-body -->
</div>
<!-- /.box -->
@*<script>
  $(function () {

      var resultsJSON = JSON.parse('@Html.Raw(Model.Results)');

      
      
      var labelsF = [];
      var dataS = [];
          
      for (var r in resultsJSON) {
        
          labelsF.push(resultsJSON[r].FirstProperty);
          dataS.push(resultsJSON[r].SecondProperty);

      }
      var dataLength = dataS.length;
      if (dataLength==0) {
          $("#graphWrapper > div").css("display", "none");
         
          $("#graphWrapper").append('<div class="alert alert-danger alert-dismissible">\
                <h4><i class="icon fa fa-ban"></i> Alert!</h4>\
                There is no data which corresponds to the given parameters.\
              </div>');
          var lnPrev = $("#allFiltersPa").css("max-width");
          $("#graphWrapper > div").css("max-width", lnPrev);
      }
      else {

          var diff = (dataS.length * 100.0) / 31;

          if (diff<=90.0) {
              diff += 10.0;
          }

          $("#graphWrapper").css("max-width", diff.toString() + "%");
          var barChartData = {
              labels: labelsF,
              datasets: [
                {
                    label: "Electronics",
                    fillColor: "rgba(226, 11, 11, 1)",
                    strokeColor: "rgba(226, 11, 11, 1)",
                    pointColor: "rgba(226, 11, 11, 1)",
                    pointStrokeColor: "#c1c7d1",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: dataS
                
                }

              ]
          };

          //-------------
          //- BAR CHART -
          //-------------
          var barChartCanvas = $("#barChart").get(0).getContext("2d");
          var barChart = new Chart(barChartCanvas);


          var barChartOptions = {
              //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
              scaleBeginAtZero: true,
              //Boolean - Whether grid lines are shown across the chart
              scaleShowGridLines: true,
              //String - Colour of the grid lines
              scaleGridLineColor: "rgba(0,0,0,.05)",
              //Number - Width of the grid lines
              scaleGridLineWidth: 1,
              //Boolean - Whether to show horizontal lines (except X axis)
              scaleShowHorizontalLines: true,
              //Boolean - Whether to show vertical lines (except Y axis)
              scaleShowVerticalLines: true,
              //Boolean - If there is a stroke on each bar
              barShowStroke: true,
              //Number - Pixel width of the bar stroke
              barStrokeWidth: 2,
              //Number - Spacing between each of the X value sets
              barValueSpacing: 5,
              //Number - Spacing between data sets within X values
              barDatasetSpacing: 1,
              //String - A legend template
              legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
              //Boolean - whether to make the chart responsive
              responsive: true,
              maintainAspectRatio: true

          };
          barChartOptions.datasetFill = true;
          barChart.Bar(barChartData, barChartOptions);

          //else 
      }
      
  });
</script>*@
<script>
      $(function () {

          var resultsJSON = JSON.parse('@Html.Raw(Model.Results)');

          
       
          var dataLength = resultsJSON.labels.length;
          if (dataLength==0) {
              $("#graphWrapper > div").css("display", "none");

              $("#graphWrapper").append('<div class="alert alert-danger alert-dismissible">\
                    <h4><i class="icon fa fa-ban"></i> Alert!</h4>\
                    There is no data which corresponds to the given parameters.\
                  </div>');
              var lnPrev = $("#allFiltersPa").css("max-width");
              $("#graphWrapper > div").css("max-width", lnPrev);
          }
          else {

              var diff = (dataLength * 100.0) / 31;

              if (diff<=90.0) {
                  diff += 10.0;
              }

              $("#graphWrapper").css("max-width", diff.toString() + "%");
              var barChartData = resultsJSON;

              //-------------
              //- BAR CHART -
              //-------------
              var barChartCanvas = $("#barChart").get(0).getContext("2d");
              var barChart = new Chart(barChartCanvas);


              var barChartOptions = {
                  //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                  scaleBeginAtZero: true,
                  //Boolean - Whether grid lines are shown across the chart
                  scaleShowGridLines: true,
                  //String - Colour of the grid lines
                  scaleGridLineColor: "rgba(0,0,0,.05)",
                  //Number - Width of the grid lines
                  scaleGridLineWidth: 1,
                  //Boolean - Whether to show horizontal lines (except X axis)
                  scaleShowHorizontalLines: true,
                  //Boolean - Whether to show vertical lines (except Y axis)
                  scaleShowVerticalLines: true,
                  //Boolean - If there is a stroke on each bar
                  barShowStroke: true,
                  //Number - Pixel width of the bar stroke
                  barStrokeWidth: 2,
                  //Number - Spacing between each of the X value sets
                  barValueSpacing: 5,
                  //Number - Spacing between data sets within X values
                  barDatasetSpacing: 1,
                  //String - A legend template
                  legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
                  //Boolean - whether to make the chart responsive
                  responsive: true,
                  maintainAspectRatio: true

              };
              barChartOptions.datasetFill = true;
              barChart.Bar(barChartData, barChartOptions);

              //else
          }

      });
 </script>