<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamsoft.PDF</name>
    </assembly>
    <members>
        <member name="M:Dynamsoft.Common.CImage.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="!:Create"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.Common.CImage.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:Dynamsoft.Common.ImageOperator.Clone(System.Drawing.Bitmap)">
            <summary>
            Clone image.
            </summary>
            
            <param name="source">Source image.</param>
            
            <returns>Return clone of the source image.</returns>
            
            <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
            does not produce the desired result - it does not create an actual clone (it does not create a copy
            of the image). That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:Dynamsoft.Common.SImageInfo.last_c_index" -->
        <member name="T:Dynamsoft.Common.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="M:Dynamsoft.Common.Util.Clone(System.Drawing.Bitmap)">
            <summary>
            Clone image.
            </summary>
            
            <param name="source">Source image.</param>
            
            <returns>Return clone of the source image.</returns>
            
            <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
            does not produce the desired result - it does not create an actual clone (it does not create a copy
            of the image). That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:Dynamsoft.Common.Util.Clone(System.Drawing.Imaging.BitmapData)">
             <summary>
             Clone image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
            
             <returns>Clones image from source image data. The message does not clone pallete in the
             case if the source image has indexed pixel format.</returns>
             
        </member>
        <member name="M:Dynamsoft.Common.Util.CopyUnmanagedMemory(System.IntPtr,System.IntPtr,System.Int32)">
             <summary>
             Copy block of unmanaged memory.
             </summary>
             
             <param name="dst">Destination pointer.</param>
             <param name="src">Source pointer.</param>
             <param name="count">Memory block's length to copy.</param>
             
             <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
             
             <remarks><para>This function is required because of the fact that .NET does
             not provide any way to copy unmanaged blocks, but provides only methods to
             copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="T:Dynamsoft.PDF.ConvertResult">
            <summary>
            The result of parsing the PDf file.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ConvertResult.PageCount">
            <summary>
            The total number of pages of the document.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ConvertResult.Image">
            <summary>
            The image data of current page.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ConvertResult.Annotations">
            <summary>
            The annotation data of the current page.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ConvertResult.CurrentPage">
            <summary>
            The index of current page.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Enums.EnumVersion">
            <summary>
            PDF file version.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Enums.EnumCompressionType">
            <summary>
            PDF file compression type.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumCompressionType.enumAutoEncode">
            <summary>
            Auto mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumCompressionType.enumCCITTFax4Encode">
            <summary>
            CCITT Group 4 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumCompressionType.enumFlateEncode">
            <summary>
            flate encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumCompressionType.enumJPEGEncode">
            <summary>
            JPEG encoding.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Enums.EnumPageSize">
            <summary>
            PDF Page Size
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.FLSA">
            <summary>
            American Foolscap format
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.FLSE">
            <summary>
            European Foolscap format
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.HALFLETTER">
            <summary>
            halfletter format
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.ID_1">
            <summary>
            ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.ID_2">
            <summary>
            ISO 7810 ID-2 format (A7 rotated)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumPageSize.ID_3">
            <summary>
            ISO 7810 ID-3 format (B7 rotated)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumConvertMode.enumCM_RENDERALL">
            <summary>
            All the content in the target PDF file will converted in a set resolution in the mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumConvertMode.enumCM_AUTO">
            <summary>
            With this mode, the PDF module will auto-detect the content of each page in the target PDF file.For a page that is itself an image
            the add-on will load it directly with its original resolution. 
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumEncryption.enum40bit_RC4_encryption">
            <summary>
            40-bit RC4 encryption.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumEncryption.enum128bit_RC4_encryptioon">
            <summary>
            128-bit RC4 encryption. 
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumEncryption.enum128bit_AES_encryption">
            <summary>
            128-bit AES encryption.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.EnumEncryption.enum256bit_AES_encryption">
            <summary>
            256-bit AES encryption.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Enums.TextRotateType">
            <summary>
            Rotate text annotaion
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Enums.TIFFCompressionType">
            <summary>
            TIFF file compression type.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_AUTO">
            <summary>
            Auto mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_NONE">
            <summary>
            Dump mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_RLE">
            <summary>
            CCITT modified Huffman RLE.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_FAX3">
            <summary>
            CCITT Group 3 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_T4">
            <summary>
            CCITT T.4 (TIFF 6 name).
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_FAX4">
            <summary>
            CCITT Group 4 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_T6">
            <summary>
            CCITT T.6 (TIFF 6 name).
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Enums.TIFFCompressionType.TIFF_LZW">
            <summary>
            Lempel Ziv and Welch.
            </summary>
        </member>
        <member name="T:MD5.MD5InitializerConstant">
            <summary>
            constants for md5
            </summary>
        </member>
        <member name="T:MD5.Digest">
            <summary>
            Represent digest with ABCD
            </summary>
        </member>
        <member name="T:MD5.MD5Helper">
            <summary>
            helper class providing suporting function
            </summary>
        </member>
        <member name="M:MD5.MD5Helper.RotateLeft(System.UInt32,System.UInt16)">
            <summary>
            Left rotates the input word
            </summary>
            <param name="uiNumber">a value to be rotated</param>
            <param name="shift">no of bits to be rotated</param>
            <returns>the rotated value</returns>
        </member>
        <member name="M:MD5.MD5Helper.ReverseByte(System.UInt32)">
            <summary>
            perform a ByteReversal on a number
            </summary>
            <param name="uiNumber">value to be reversed</param>
            <returns>reversed value</returns>
        </member>
        <member name="T:MD5.MD5">
            <summary>
            Summary description for MD5.
            </summary>
        </member>
        <member name="F:MD5.MD5.T">
            <summary>
            lookup table 4294967296*sin(i)
            </summary>
        </member>
        <member name="F:MD5.MD5.X">
            <summary>
            X used to proces data in 
            512 bits chunks as 16 32 bit word
            </summary>
        </member>
        <member name="F:MD5.MD5.dgFingerPrint">
            <summary>
            the finger print obtained. 
            </summary>
        </member>
        <member name="F:MD5.MD5.m_byteInput">
            <summary>
            the input bytes
            </summary>
        </member>
        <member name="M:MD5.MD5.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MD5.MD5.CalculateMD5Value">
            <summary>
            calculat md5 signature of the string in Input
            </summary>
            <returns> Digest: the finger print of msg</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MD5.MD5.TransF(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:MD5.MD5.TransG(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)" -->
        <member name="M:MD5.MD5.TransH(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)">
            <summary>
            perform transformatio using h(b^c^d)
            </summary>
        </member>
        <member name="M:MD5.MD5.TransI(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)">
            <summary>
            perform transformatio using i (c^(b|~d))
            </summary>
        </member>
        <member name="M:MD5.MD5.PerformTransformation(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Perform All the transformation on the data
            </summary>
            <param name="A">A</param>
            <param name="B">B </param>
            <param name="C">C</param>
            <param name="D">D</param>
        </member>
        <member name="M:MD5.MD5.CreatePaddedBuffer">
            <summary>
            Create Padded buffer for processing , buffer is padded with 0 along 
            with the size in the end
            </summary>
            <returns>the padded buffer as byte array</returns>
        </member>
        <member name="M:MD5.MD5.CopyBlock(System.Byte[],System.UInt32)">
            <summary>
            Copies a 512 bit block into X as 16 32 bit words
            </summary>
            <param name="bMsg"> source buffer</param>
            <param name="block">no of block to copy starting from 0</param>
        </member>
        <member name="P:MD5.MD5.Value">
             <summary>
            gets or sets as string
             </summary>
        </member>
        <member name="P:MD5.MD5.ValueAsByte">
            <summary>
            get/sets as  byte array 
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Annotation.AnnotationData">
            <summary>
            Defines the dynamsoft annotation class. 
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.AnnotationType">
            <summary>
            Returns or sets the annotation type. To use the property, the property MouseShape should be set to false.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
            <remarks>
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>Annotation Types</th>
            </tr>
            <tr valign="center">
            <td>enumNone(default)</td>
            <td>Select an area</td>
            </tr>
            <tr valign="center">
            <td>enumPointer(Pointer)</td>
            <td>Select an existing annotation. Press "Ctrl" to multi-select annotations.</td>
            </tr>
            <tr valign="center">
            <td>enumText(Text)</td>
            <td>Create a text.The annotation type will be set back to 1 once the annotation is completed.</td>
            </tr>
            <tr valign="center">
            <td>enumLine(Line)</td>
            <td>Create a line.The annotation type will be set back to 1 once the annotation is completed.</td>
            </tr>
            <tr valign="center">
            <td>enumRectangle(Rectangle)</td>
            <td>Create a rectangle.The annotation type will be set back to 1 once the annotation is completed.</td>
            </tr>
            <tr valign="center">
            <td>enumEllipse(Ellipse)</td>
            <td>Create a ellipse.The annotation type will be set back to 1 once the annotation is completed.</td>
            </tr>
            </table>
            </div>
            <br/>
            </remarks>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.Name">
            <summary>
            Returns or sets the name of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.UserName">
            <summary>
            Returns or sets the user name of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.Description">
            <summary>
            Returns or sets the description of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.CreationTime">
            <summary>
            Returns or sets the time when the annotation is created.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.ModifiedTime">
            <summary>
            Returns or sets the time when the annotation is last modified.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.FillColor">
            <summary>
            Return or sets the fill color and transparency for the area inside the annotation.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.PenColor">
            <summary>
            Return or sets the color of the pen for drawing the annotation rectanle/ellipse/line. This property is only valid when the annotation type is NOT 2(Text).
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.PenWidth">
            <summary>
            Returns or sets the width of the pen for drawing the annotation rectangle/ellipse/line. This property is only valid when the annotation type is NOT 2(Text).
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
            <remarks>
            By default, the color is width is 1.
            </remarks>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.GUID">
            <summary>
            Returns or sets the GUID of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.Location">
            <summary>
            Returns the left-top coordinate of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.Size">
            <summary>
            Returns or sets the size of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.TextContent">
            <summary>
            Returns or sets the content of the annotation text.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.TextRotateType">
            <summary>
            Returns or sets the rotate angle of the annotation text.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
            <remarks>        '
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>TextRotate Types</th>
            </tr>
            <tr valign="center">
            <td>0</td>
            <td>Rotate0</td>
            </tr>
            <tr valign="center">
            <td>1</td>
            <td>Rotate90</td>
            </tr>
            <tr valign="center">
            <td>2</td>
            <td>Rotate180</td>
            </tr>
            <tr valign="center">
            <td>3</td>
            <td>Rotate270</td>
            </tr>
            </table>
            </div>
            </remarks>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.Selected">
            <summary>
            Returns or sets if the annotation is selected.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.StartPoint">
            <summary>
            Returns or sets the left-top coordinate of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Annotation.AnnotationData.EndPoint">
            <summary>
            Returns or sets the right-bottom coordinate of the annotation.
            </summary>
            <exception cref="!:Dynamsoft.ImageCore.ImageCoreException">
            When an error occurs, please check ImageCoreException.
            </exception>
        </member>
        <member name="T:Dynamsoft.PDF.Annotation.AnnoTextFont">
            <summary>
            Defines a class getting or setting the propeties of text annotation font type.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.BaseFont">
            <summary>
            Summary description for BaseFont.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.COURIER">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.COURIER_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.COURIER_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.COURIER_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.HELVETICA">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.HELVETICA_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.HELVETICA_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.HELVETICA_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.SYMBOL">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.TIMES_ROMAN">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.TIMES_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.TIMES_ITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.TIMES_BOLDITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.ZAPFDINGBATS">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.ASCENT">
            The maximum height above the baseline reached by glyphs in this
            font, excluding the height of glyphs for accented characters.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CAPHEIGHT">
            The y coordinate of the top of flat capital letters, measured from
            the baseline.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.DESCENT">
            The maximum depth below the baseline reached by glyphs in this
            font. The value is a negative number.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.ITALICANGLE">
            The angle, expressed in degrees counterclockwise from the vertical,
            of the dominant vertical strokes of the font. The value is
            negative for fonts that slope to the right, as almost all italic fonts do.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.BBOXLLX">
            The lower left x glyph coordinate.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.BBOXLLY">
            The lower left y glyph coordinate.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.BBOXURX">
            The upper right x glyph coordinate.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.BBOXURY">
            The upper right y glyph coordinate.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.AWT_ASCENT">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.AWT_DESCENT">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.AWT_LEADING">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.AWT_MAXADVANCE">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.UNDERLINE_POSITION">
            The underline position. Usually a negative value.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.UNDERLINE_THICKNESS">
            The underline thickness.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.STRIKETHROUGH_POSITION">
            The strikethrough position.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.STRIKETHROUGH_THICKNESS">
            The strikethrough thickness.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.SUBSCRIPT_SIZE">
            The recommended vertical size for subscripts for this font.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.SUBSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for subscripts for this font. Usually a negative value.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.SUPERSCRIPT_SIZE">
            The recommended vertical size for superscripts for this font.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.SUPERSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for superscripts for this font.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_T1">
            The font is Type 1.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_TT">
            The font is True Type with a standard encoding.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_CJK">
            The font is CJK.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_TTUNI">
            The font is True Type with a Unicode encoding.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_DOCUMENT">
            A font already inside the document.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.FONT_TYPE_T3">
            A Type3 font.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.IDENTITY_H">
            The Unicode encoding with horizontal writing.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.IDENTITY_V">
            The Unicode encoding with vertical writing.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CP1250">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CP1252">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CP1257">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.WINANSI">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.MACROMAN">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.EMBEDDED">
            if the font has to be embedded 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.NOT_EMBEDDED">
            if the font doesn't have to be embedded 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CACHED">
            if the font has to be cached 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.NOT_CACHED">
            if the font doesn't have to be cached 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.RESOURCE_PATH">
            The path to the font resources. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.CID_NEWLINE">
            The fake CID code that represents a newline. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.notdef">
            a not defined character in a custom PDF encoding 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.fontType">
            The font type.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.widths">
            table of characters widths for this encoding 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.differences">
            encoding names 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.unicodeDifferences">
            same as differences but with the unicode codes 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.encoding">
            encoding used with this font 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.embedded">
            true if the font is to be embedded in the PDF 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.compressionLevel">
            The compression level for the font stream.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.fontSpecific">
            true if the font must use its built in encoding. In that case the
            <CODE>encoding</CODE> is only used to map a char to the position inside
            the font, not to the expected char name.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.fontCache">
            cache for the fonts already used. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.BuiltinFonts14">
            list of the 14 built in fonts. 
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.forceWidthsOutput">
            Forces the output of the width array. Only matters for the 14
            built-in fonts.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.directTextToByte">
            Converts <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="F:Dynamsoft.PDF.BaseFont.specialMap">
            Custom encodings use this map to key the Unicode character
            to the single byte code.
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.#ctor">
            Creates new BaseFont
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetBaseName(System.String)">
            Gets the name without the modifiers Bold, Italic or BoldItalic.
            @param name the full name of the font
            @return the name without the modifiers Bold, Italic or BoldItalic
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.NormalizeEncoding(System.String)">
            Normalize the encoding names. "winansi" is changed to "Cp1252" and
            "macroman" is changed to "MacRoman".
            @param enc the encoding to be normalized
            @return the normalized encoding
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.CreateEncoding">
            Creates the <CODE>widths</CODE> and the <CODE>differences</CODE> arrays
            @throws UnsupportedEncodingException the encoding is not supported
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
            or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetDescent(System.String)">
            Gets the descent of a <CODE>String</CODE> in normalized 1000 units. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @return the dexcent in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetAscent(System.String)">
            Gets the ascent of a <CODE>String</CODE> in normalized 1000 units. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @return the ascent in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetDescentPoint(System.String,System.Single)">
            Gets the descent of a <CODE>String</CODE> in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @param fontSize the size of the font
            @return the dexcent in points
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetAscentPoint(System.String,System.Single)">
            Gets the ascent of a <CODE>String</CODE> in points. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @param fontSize the size of the font
            @return the ascent in points
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetWidthPointKerned(System.String,System.Single)">
            Gets the width of a <CODE>String</CODE> in points taking kerning
            into account.
            @param text the <CODE>String</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetWidthPoint(System.String,System.Single)">
            Gets the width of a <CODE>string</CODE> in points.
            @param text the <CODE>string</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetWidthPoint(System.Int32,System.Single)">
            Gets the width of a <CODE>char</CODE> in points.
            @param char1 the <CODE>char</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.BaseFont.ConvertToBytes(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.BaseFont.ConvertToBytes(System.Int32)" -->
        <member name="M:Dynamsoft.PDF.BaseFont.GetFullFontStream">
            Returns a PdfStream object with the full font program (if possible).
            This method will return null for some types of fonts (CJKFont, Type3Font)
            or if there is no font program available (standard Type 1 fonts).
            @return  a PdfStream with the font program
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.IsEmbedded">
            Gets the embedded flag.
            @return <CODE>true</CODE> if the font is embedded.
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.IsFontSpecific">
            Gets the symbolic flag of the font.
            @return <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.CreateSubsetPrefix">
            Creates a unique subset prefix to be added to the font name when the font is embedded and subset.
            @return the subset prefix
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetUnicodeDifferences(System.Int32)">
            Gets the Unicode character corresponding to the byte output to the pdf stream.
            @param index the byte index
            @return the Unicode character
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetResourceStream(System.String)">
            Gets the font resources.
            @param key the name of the resource
            @return the <CODE>Stream</CODE> to get the resource or
            <CODE>null</CODE> if not found
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.BaseFont.GetUnicodeEquivalent(System.Int32)" -->
        <member name="M:Dynamsoft.PDF.BaseFont.GetCidCode(System.Int32)">
            Gets the CID code given an Unicode.
            It has only meaning with CJK fonts.
            @param c the Unicode
            @return the CID equivalent
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.CharExists(System.Int32)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.SetCharAdvance(System.Int32,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetDocumentFonts(Dynamsoft.PDF.PdfReader)">
            Gets a list of all document fonts. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @return the list of fonts and references
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetDocumentFonts(Dynamsoft.PDF.PdfReader,System.Int32)">
            Gets a list of the document fonts in a particular page. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @param page the page to list the fonts from
            @return the list of fonts and references
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.GetCharBBox(System.Int32)">
            Gets the smallest box enclosing the character contours. It will return
            <CODE>null</CODE> if the font has not the information or the character has no
            contours, as in the case of the space, for example. Characters with no contours may
            also return [0,0,0,0].
            @param c the character to get the contour bounding box from
            @return an array of four floats with the bounding box in the format [llx,lly,urx,ury] or
            <code>null</code>
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.CorrectArabicAdvance">
            iText expects Arabic Diactrics (tashkeel) to have zero advance but some fonts,
            most notably those that come with Windows, like times.ttf, have non-zero
            advance for those characters. This method makes those character to have zero
            width advance and work correctly in the iText Arabic shaping and reordering
            context.
        </member>
        <member name="M:Dynamsoft.PDF.BaseFont.AddSubsetRange(System.Int32[])">
            Adds a character range when subsetting. The range is an <CODE>int</CODE> array
            where the first element is the start range inclusive and the second element is the
            end range inclusive. Several ranges are allowed in the same array.
            @param range the character range
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.Encoding">
            Gets the encoding used to convert <CODE>string</CODE> into <CODE>byte[]</CODE>.
            @return the encoding name
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.FontType">
            Gets the font type. The font types can be: FONT_TYPE_T1,
            FONT_TYPE_TT, FONT_TYPE_CJK and FONT_TYPE_TTUNI.
            @return the font type
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.BaseFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.BaseFont.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.BaseFont.FamilyFontName" -->
        <member name="P:Dynamsoft.PDF.BaseFont.CodePagesSupported">
            Gets the code pages supported by the font. This has only meaning
            with True Type fonts.
            @return the code pages supported by the font
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.Widths">
            Gets the font width array.
            @return the font width array
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.Differences">
            Gets the array with the names of the characters.
            @return the array with the names of the characters
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.UnicodeDifferences">
            Gets the array with the unicode characters.
            @return the array with the unicode characters
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.ForceWidthsOutput">
            Set to <CODE>true</CODE> to force the generation of the
            widths array.
            @param forceWidthsOutput <CODE>true</CODE> to force the generation of the
            widths array
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.DirectTextToByte">
            Sets the conversion of <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting. This is a low level feature to put the bytes directly in
            the content stream without passing through string.GetBytes().
            @param directTextToByte New value of property directTextToByte.
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. When set to <CODE>true</CODE>
            only the glyphs used will be included in the font. When set to <CODE>false</CODE>
            and {@link #addSubsetRange(int[])} was not called the full font will be included
            otherwise just the characters ranges will be included.
            @param subset new value of property subset
        </member>
        <member name="P:Dynamsoft.PDF.BaseFont.CompressionLevel">
            Sets the compression level to be used for the font streams.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since 2.1.3
        </member>
        <member name="T:Dynamsoft.PDF.ByteBuffer">
            Acts like a <CODE>StringBuilder</CODE> but works with <CODE>byte</CODE> arrays.
            floating point is converted to a format suitable to the PDF.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:Dynamsoft.PDF.ByteBuffer.count">
            The count of bytes in the buffer. 
        </member>
        <member name="F:Dynamsoft.PDF.ByteBuffer.buf">
            The buffer where the bytes are stored. 
        </member>
        <member name="F:Dynamsoft.PDF.ByteBuffer.HIGH_PRECISION">
            If <CODE>true</CODE> always output floating point numbers with 6 decimal digits.
            If <CODE>false</CODE> uses the faster, although less precise, representation.
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.#ctor">
            Creates new ByteBuffer with capacity 128 
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.#ctor(System.Int32)">
            Creates a byte buffer with a certain capacity.
            @param size the initial capacity
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.ByteBuffer.SetCacheSize(System.Int32)" -->
        <member name="M:Dynamsoft.PDF.ByteBuffer.FillCache(System.Int32)">
             You can fill the cache in advance if you want to.
            
             @param   decimals
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.ConvertToBytes(System.Int32)">
             Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
            
             @param   i   the int
             @return  a bytearray
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append_i(System.Int32)">
            Appends an <CODE>int</CODE>. The size of the array will grow by one.
            @param b the int to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            Appends the subarray of the <CODE>byte</CODE> array. The buffer will grow by
            <CODE>len</CODE> bytes.
            @param b the array to be appended
            @param off the offset to the start of the array
            @param len the length of bytes to Append
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Byte[])">
            Appends an array of bytes.
            @param b the array to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.String)">
            Appends a <CODE>string</CODE> to the buffer. The <CODE>string</CODE> is
            converted according to the encoding ISO-8859-1.
            @param str the <CODE>string</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Char)">
            Appends a <CODE>char</CODE> to the buffer. The <CODE>char</CODE> is
            converted according to the encoding ISO-8859-1.
            @param c the <CODE>char</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(Dynamsoft.PDF.ByteBuffer)">
            Appends another <CODE>ByteBuffer</CODE> to this buffer.
            @param buf the <CODE>ByteBuffer</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Int32)">
            Appends the string representation of an <CODE>int</CODE>.
            @param i the <CODE>int</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Single)">
            Appends a string representation of a <CODE>float</CODE> according
            to the Pdf conventions.
            @param i the <CODE>float</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Append(System.Double)">
            Appends a string representation of a <CODE>double</CODE> according
            to the Pdf conventions.
            @param d the <CODE>double</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.FormatDouble(System.Double)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.FormatDouble(System.Double,Dynamsoft.PDF.ByteBuffer)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @param buf a ByteBuffer
            @return the <CODE>String</CODE> representation of the <CODE>double</CODE> if
            <CODE>buf</CODE> is <CODE>null</CODE>. If <CODE>buf</CODE> is <B>not</B> <CODE>null</CODE>,
            then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.Reset">
            Sets the size to zero.
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.ToByteArray">
             Creates a newly allocated byte array. Its size is the current
             size of this output stream and the valid contents of the buffer
             have been copied into it.
            
             @return  the current contents of this output stream, as a byte array.
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.ToString">
             Converts the buffer's contents into a string, translating bytes into
             characters according to the platform's default character encoding.
            
             @return string translated from the buffer's contents.
        </member>
        <member name="M:Dynamsoft.PDF.ByteBuffer.WriteTo(System.IO.Stream)">
             Writes the complete contents of this byte buffer output to
             the specified output stream argument, as if by calling the output
             stream's write method using <code>out.Write(buf, 0, count)</code>.
            
             @param      out   the output stream to which to write the data.
             @exception  IOException  if an I/O error occurs.
        </member>
        <member name="P:Dynamsoft.PDF.ByteBuffer.Size">
             Returns the current size of the buffer.
            
             @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.BmpImage" -->
        <member name="M:Dynamsoft.PDF.BmpImage.GetImage(System.Uri)">
            Reads a BMP from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.BmpImage.GetImage(System.IO.Stream)">
            Reads a BMP from a stream. The stream is not closed.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.BmpImage.GetImage(System.IO.Stream,System.Boolean,System.Int32)">
            Reads a BMP from a stream. The stream is not closed.
            The BMP may not have a header and be considered as a plain DIB.
            @param is the stream
            @param noHeader true to process a plain DIB
            @param size the size of the DIB. Not used for a BMP
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.BmpImage.GetImage(System.String)">
            Reads a BMP from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.BmpImage.GetImage(System.Byte[])">
            Reads a BMP from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="T:Dynamsoft.PDF.CCITTG4Encoder">
            Encodes data in the CCITT G4 FAX format.
        </member>
        <member name="M:Dynamsoft.PDF.CCITTG4Encoder.#ctor(System.Int32)">
            Creates a new encoder.
            @param width the line width
        </member>
        <member name="M:Dynamsoft.PDF.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32,System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param offset the offset into the data
            @param size the size of the data to be encoded
        </member>
        <member name="M:Dynamsoft.PDF.CCITTG4Encoder.Compress(System.Byte[],System.Int32,System.Int32)">
            Encodes a full image.
            @param data the data to encode
            @param width the image width
            @param height the image height
            @return the encoded image
        </member>
        <member name="M:Dynamsoft.PDF.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param height the number of lines to encode
        </member>
        <member name="M:Dynamsoft.PDF.CCITTG4Encoder.Close">
            Closes the encoder and returns the encoded data.
            @return the encoded data
        </member>
        <member name="T:Dynamsoft.PDF.LZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.Decode(System.Byte[],System.IO.Stream)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.PDF.LZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newstring</code> to the end of <code>oldstring</code>.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PngImage" -->
        <member name="F:Dynamsoft.PDF.PngImage.IHDR">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.PLTE">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.IDAT">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.IEND">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.tRNS">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.pHYs">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.gAMA">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.cHRM">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.sRGB">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.iCCP">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.PDF.PngImage.PNGID">
            Some PNG specific values. 
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.#ctor(System.IO.Stream)">
            Creates a new instance of PngImage 
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetImage(System.Uri)">
            Reads a PNG from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetImage(System.IO.Stream)">
            Reads a PNG from a stream.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetImage(System.String)">
            Reads a PNG from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetImage(System.Byte[])">
            Reads a PNG from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetInt(System.IO.Stream)">
             Gets an <CODE>int</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetWord(System.IO.Stream)">
             Gets a <CODE>word</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PngImage.GetString(System.IO.Stream)">
             Gets a <CODE>String</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="T:Dynamsoft.PDF.TIFFConstants">
            A list of constants used in class TIFFImage.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.TIFFDirectory" -->
        <member name="F:Dynamsoft.PDF.TIFFDirectory.isBigEndian">
            A bool storing the endianness of the stream. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFDirectory.numEntries">
            The number of entries in the IFD. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFDirectory.fields">
            An array of TIFFFields. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFDirectory.fieldIndex">
            A Hashtable indexing the fields by tag number. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFDirectory.IFDOffset">
            The offset of this IFD. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFDirectory.nextIFDOffset">
            The offset of the next IFD. 
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.#ctor">
            The default constructor. 
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.#ctor(Dynamsoft.PDF.RandomAccessFileOrArray,System.Int32)">
             Constructs a TIFFDirectory from a SeekableStream.
             The directory parameter specifies which directory to read from
             the linked list present in the stream; directory 0 is normally
             read but it is possible to store multiple images in a single
             TIFF file by maintaing multiple directories.
            
             @param stream a SeekableStream to read from.
             @param directory the index of the directory to read.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.#ctor(Dynamsoft.PDF.RandomAccessFileOrArray,System.Int64,System.Int32)">
             Constructs a TIFFDirectory by reading a SeekableStream.
             The ifd_offset parameter specifies the stream offset from which
             to begin reading; this mechanism is sometimes used to store
             private IFDs within a TIFF file that are not part of the normal
             sequence of IFDs.
            
             @param stream a SeekableStream to read from.
             @param ifd_offset the long byte offset of the directory.
             @param directory the index of the directory to read beyond the
                    one at the current stream offset; zero indicates the IFD
                    at the current offset.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetNumEntries">
            Returns the number of directory entries. 
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetField(System.Int32)">
            Returns the value of a given tag as a TIFFField,
            or null if the tag is not present.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.IsTagPresent(System.Int32)">
            Returns true if a tag appears in the directory.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetTags">
            Returns an ordered array of ints indicating the tag
            values.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFields">
            Returns an array of TIFFFields containing all the fields
            in this directory.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsByte(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsByte(System.Int32)">
            Returns the value of index 0 of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has  type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsLong(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsLong(System.Int32)">
            Returns the value of index 0 of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsFloat(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            float.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsFloat(System.Int32)">
            Returns the value of index 0 of a given tag as a float.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsDouble(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            double.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetFieldAsDouble(System.Int32)">
            Returns the value of index 0 of a given tag as a double.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetNumDirectories(Dynamsoft.PDF.RandomAccessFileOrArray)">
            Returns the number of image directories (subimages) stored in a
            given TIFF file, represented by a <code>SeekableStream</code>.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.IsBigEndian">
            Returns a bool indicating whether the byte order used in the
            the TIFF file is big-endian (i.e. whether the byte order is from
            the most significant to the least significant)
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetIFDOffset">
            Returns the offset of the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFDirectory.GetNextIFDOffset">
            Returns the offset of the next IFD after the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFFaxDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            @param fillOrder   The fill order of the compressed data bytes.
            @param w
            @param h
        </member>
        <member name="F:Dynamsoft.PDF.TIFFFaxDecompressor.fillOrder">
            The logical order of bits within a byte.
            <pre>
            1 = MSB-to-LSB
            2 = LSB-to-MSB (flipped)
            </pre>
        </member>
        <member name="F:Dynamsoft.PDF.TIFFFaxDecompressor.uncompressedMode">
            Uncompressed mode flag: 1 if uncompressed, 0 if not.
        </member>
        <member name="F:Dynamsoft.PDF.TIFFFaxDecompressor.fillBits">
            EOL padding flag: 1 if fill bits have been added before an EOL such
            that the EOL ends on a byte boundary, 0 otherwise.
        </member>
        <member name="F:Dynamsoft.PDF.TIFFFaxDecompressor.oneD">
            Coding dimensionality: 1 for 2-dimensional, 0 for 1-dimensional.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFFaxDecompressor.SetOptions(System.Int32,System.Int32,System.Int32,System.Int32)">
            Invokes the superclass method and then sets instance variables on
            the basis of the metadata set on this decompressor.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.TIFFField" -->
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_BYTE">
            Flag for 8 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_ASCII">
            Flag for null-terminated ASCII strings. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_SHORT">
            Flag for 16 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_LONG">
            Flag for 32 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_RATIONAL">
            Flag for pairs of 32 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_SBYTE">
            Flag for 8 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_UNDEFINED">
            Flag for 8 bit uninterpreted bytes. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_SSHORT">
            Flag for 16 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_SLONG">
            Flag for 32 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_SRATIONAL">
            Flag for pairs of 32 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_FLOAT">
            Flag for 32 bit IEEE floats. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.TIFF_DOUBLE">
            Flag for 64 bit IEEE doubles. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.tag">
            The tag number. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.type">
            The tag type. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.count">
            The number of data items present in the field. 
        </member>
        <member name="F:Dynamsoft.PDF.TIFFField.data">
            The field data. 
        </member>
        <member name="M:Dynamsoft.PDF.TIFFField.#ctor">
            The default constructor. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.#ctor(System.Int32,System.Int32,System.Int32,System.Object)" -->
        <member name="M:Dynamsoft.PDF.TIFFField.GetTag">
            Returns the tag number, between 0 and 65535.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFField.GetType">
             Returns the type of the data stored in the IFD.
             For a TIFF6.0 file, the value will equal one of the
             TIFF_ constants defined in this class.  For future
             revisions of TIFF, higher values are possible.
            
        </member>
        <member name="M:Dynamsoft.PDF.TIFFField.GetCount">
            Returns the number of elements in the IFD.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsBytes" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsChars" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsShorts" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsInts" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsLongs" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsFloats" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsDoubles" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsSRationals" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsRationals" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsInt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsLong(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsFloat(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsDouble(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsString(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsSRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.GetAsRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.TIFFField.CompareTo(System.Object)" -->
        <member name="T:Dynamsoft.PDF.TiffImage">
            Reads TIFF images
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.PDF.TiffImage.GetNumberOfPages(Dynamsoft.PDF.RandomAccessFileOrArray)">
            Gets the number of pages the TIFF document has.
            @param s the file source
            @return the number of pages
        </member>
        <member name="M:Dynamsoft.PDF.TiffImage.GetTiffImage(Dynamsoft.PDF.RandomAccessFileOrArray,System.Int32)">
            Reads a page from a TIFF image. Direct mode is not used.
            @param s the file source
            @param page the page to get. The first page is 1
            @return the <CODE>Image</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.TiffImage.GetTiffImage(Dynamsoft.PDF.RandomAccessFileOrArray,System.Int32,System.Boolean)">
            Reads a page from a TIFF image.
            @param s the file source
            @param page the page to get. The first page is 1
            @param direct for single strip, CCITT images, generate the image
            by direct byte copying. It's faster but may not work
            every time
            @return the <CODE>Image</CODE>
        </member>
        <member name="T:Dynamsoft.PDF.TIFFLZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.Decode(System.Byte[],System.Byte[],System.Int32)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
             @param h               The number of rows the compressed data contains.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.PDF.TIFFLZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newString</code> to the end of <code>oldString</code>.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfDictionary" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfObject" -->
        <member name="F:Dynamsoft.PDF.PdfObject.BOOLEAN">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.NUMBER">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.STRING">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.NAME">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.ARRAY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.DICTIONARY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.STREAM">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.NULL">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.INDIRECT">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.NOTHING">
            This is an empty string used for the <CODE>PdfNull</CODE>-object and for an empty <CODE>PdfString</CODE>-object. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.TEXT_PDFDOCENCODING">
            This is the default encoding to be used for converting strings into bytes and vice versa.
            The default encoding is PdfDocEcoding.
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.TEXT_UNICODE">
            This is the encoding to be used to output text in Unicode. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.bytes">
            the content of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.type">
            the type of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfObject.indRef">
            Holds value of property indRef.
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.#ctor(System.Int32)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> without any <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.#ctor(System.Int32,System.String)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        content            content of the new <CODE>PdfObject</CODE> as a <CODE>String</CODE>.
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.#ctor(System.Int32,System.Byte[])">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.ToPdf(Dynamsoft.PDF.PdfWriter,System.IO.Stream)">
            Writes the PDF representation of this <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>s to the writer.
            @param writer for backwards compatibility
            @param os the outputstream to write the bytes to.
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.GetBytes">
            Gets the presentation of this object in a byte array
            @return a byte array
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.CanBeInObjStm">
            Can this object be in an object stream?
            @return true if this object can be in an object stream.
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.ToString">
             Returns the <CODE>String</CODE>-representation of this <CODE>PdfObject</CODE>.
            
             @return        a <CODE>String</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsNull">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNull</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsBoolean">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfBoolean</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsNumber">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNumber</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsString">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfString</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsName">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfName</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsArray">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfArray</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsDictionary">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfDictionary</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsStream">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfStream</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfObject.IsIndirect">
            Checks if this is an indirect object.
            @return true if this is an indirect object
        </member>
        <member name="P:Dynamsoft.PDF.PdfObject.Length">
             Returns the length of the actual content of the <CODE>PdfObject</CODE>.
             <P>
             In some cases, namely for <CODE>PdfString</CODE> and <CODE>PdfStream</CODE>,
             this method differs from the method <CODE>pdfLength</CODE> because <CODE>pdfLength</CODE>
             returns the length of the PDF representation of the object, not of the actual content
             as does the method <CODE>length</CODE>.</P>
             <P>
             Remark: the actual content of an object is in some cases identical to its representation.
             The following statement is always true: Length() &gt;= PdfLength().</P>
            
             @return        a length
        </member>
        <member name="P:Dynamsoft.PDF.PdfObject.Content">
             Changes the content of this <CODE>PdfObject</CODE>.
            
             @param        content            the new content of this <CODE>PdfObject</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfObject.Type">
             Returns the type of this <CODE>PdfObject</CODE>.
            
             @return        a type
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.FONT">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.OUTLINES">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.PAGE">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.PAGES">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.CATALOG">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.dictionaryType">
            This is the type of this dictionary 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDictionary.hashMap">
            This is the hashmap that contains all the values and keys of the dictionary 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.#ctor">
            Constructs an empty <CODE>PdfDictionary</CODE>-object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.#ctor(Dynamsoft.PDF.PdfName)">
             Constructs a <CODE>PdfDictionary</CODE>-object of a certain type.
            
             @param        type    a <CODE>PdfName</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.ToPdf(Dynamsoft.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfDictionary</CODE>.
            
             @return        an array of <CODE>byte</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.Put(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is <CODE>null</CODE> or <CODE>PdfNull</CODE> the key is deleted.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.PutEx(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is null it does nothing.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.Remove(Dynamsoft.PDF.PdfName)">
             Removes a <CODE>PdfObject</CODE> and its key from the <CODE>PdfDictionary</CODE>.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDictionary.Get(Dynamsoft.PDF.PdfName)" -->
        <member name="M:Dynamsoft.PDF.PdfDictionary.IsFont">
              Checks if a <CODE>Dictionary</CODE> is of the type FONT.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.IsPage">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGE.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.IsPages">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.IsCatalog">
              Checks if a <CODE>Dictionary</CODE> is of the type CATALOG.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.IsOutlineTree">
              Checks if a <CODE>Dictionary</CODE> is of the type OUTLINES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.GetDirectObject(Dynamsoft.PDF.PdfName)">
            This function behaves the same as 'get', but will never return an indirect reference,
            it will always look such references up and return the actual object.
            @param key 
            @return null, or a non-indirect object
        </member>
        <member name="M:Dynamsoft.PDF.PdfDictionary.GetAsDict(Dynamsoft.PDF.PdfName)">
            All the getAs functions will return either null, or the specified object type
            This function will automatically look up indirect references. There's one obvious
            exception, the one that will only return an indirect reference.  All direct objects
            come back as a null.
            Mark A Storer (2/17/06)
            @param key
            @return the appropriate object in its final type, or null
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollection.DETAILS">
            A type of PDF Collection 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollection.TILE">
            A type of PDF Collection 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollection.HIDDEN">
            A type of PDF Collection 
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollection.#ctor(System.Int32)">
            Constructs a PDF Collection.
            @param   type    the type of PDF collection.
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollection.InitialDocument">
            Identifies the document that will be initially presented
            in the user interface.
            @param description   the description that was used when attaching the file to the document
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollection.Schema">
            Sets the Collection schema dictionary.
            @param schema    an overview of the collection fields
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollection.Sort">
            Sets the Collection sort dictionary.
            @param sort  a collection sort dictionary
        </member>
        <member name="T:Dynamsoft.PDF.PdfCollectionField">
             @author blowagie
            
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.TEXT">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.DATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.NUMBER">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.FILENAME">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.DESC">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.MODDATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.CREATIONDATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.SIZE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionField.fieldType">
            The type of the PDF collection field. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionField.#ctor(System.String,System.Int32)">
            Creates a PdfCollectionField.
            @param name      the field name
            @param type      the field type
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionField.IsCollectionItem">
            Checks if the type of the field is suitable for a Collection Item.
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionField.GetValue(System.String)">
            Returns a PdfObject that can be used as the value of a Collection Item.
            @param String    value   the value that has to be changed into a PdfObject (PdfString, PdfDate or PdfNumber) 
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollectionField.Order">
            The relative order of the field name. Fields are sorted in ascending order.
            @param i a number indicating the order of the field
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollectionField.Visible">
            Sets the initial visibility of the field.
            @param visible   the default is true (visible)
        </member>
        <member name="P:Dynamsoft.PDF.PdfCollectionField.Editable">
            Indication if the field value should be editable in the viewer.
            @param editable  the default is false (not editable)
        </member>
        <member name="F:Dynamsoft.PDF.PdfCollectionItem.schema">
            The PdfCollectionSchema with the names and types of the items. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.#ctor(Dynamsoft.PDF.PdfCollectionSchema)">
            Constructs a Collection Item that can be added to a PdfFileSpecification.
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,System.String)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.PDF.PdfString)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.PDF.PdfDate)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.PDF.PdfNumber)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,System.DateTime)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,System.Int32)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,System.Single)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.AddItem(System.String,System.Double)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionItem.SetPrefix(System.String,System.String)">
            Adds a prefix for the Collection item.
            You can only use this method after you have set the value of the item.
            @param prefix    a prefix
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSchema.#ctor">
            Creates a Collection Schema dictionary.
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSchema.AddField(System.String,Dynamsoft.PDF.PdfCollectionField)">
            Adds a Collection field to the Schema.
            @param name  the name of the collection field
            @param field a Collection Field
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSort.#ctor(System.String)">
            Constructs a PDF Collection Sort Dictionary.
            @param key   the key of the field that will be used to sort entries
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSort.#ctor(System.String[])">
            Constructs a PDF Collection Sort Dictionary.
            @param keys  the keys of the fields that will be used to sort entries
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSort.SetSortOrder(System.Boolean)">
            Defines the sort order of the field (ascending or descending).
            @param ascending true is the default, use false for descending order
        </member>
        <member name="M:Dynamsoft.PDF.PdfCollectionSort.SetSortOrder(System.Boolean[])">
            Defines the sort order of the field (ascending or descending).
            @param ascending an array with every element corresponding with a name of a field.
        </member>
        <member name="M:Dynamsoft.PDF.PdfTargetDictionary.#ctor(Dynamsoft.PDF.PdfTargetDictionary)">
            Creates dictionary referring to a target document that is the parent of the current document.
            @param nested    null if this is the actual target, another target if this is only an intermediate target.
        </member>
        <member name="M:Dynamsoft.PDF.PdfTargetDictionary.#ctor(System.Boolean)">
            Creates a dictionary referring to a target document.
            @param child if false, this refers to the parent document; if true, this refers to a child document, and you'll have to specify where to find the child using the other methods of this class
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.EmbeddedFileName">
            If this dictionary refers to a child that is a document level attachment,
            you need to specify the name that was used to attach the document.
            @param   name    the name in the EmbeddedFiles name tree
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.FileAttachmentPagename">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the name of the page (or use setFileAttachmentPage to specify the page number).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param name  the named destination referring to the page with the file attachment.
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.FileAttachmentPage">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page number (or use setFileAttachmentPagename to specify a named destination).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param page  the page number of the page with the file attachment.
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.FileAttachmentName">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the name of the attachment added to this page (or use setFileAttachmentIndex).
            @param name      the name of the attachment
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.FileAttachmentIndex">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the index of the attachment added to this page (or use setFileAttachmentName).
            @param name      the name of the attachment
        </member>
        <member name="P:Dynamsoft.PDF.PdfTargetDictionary.AdditionalPath">
            If this dictionary refers to an intermediate target, you can
            add the next target in the sequence.
            @param nested    the next target in the sequence
        </member>
        <member name="T:Dynamsoft.PDF.ReadOnlyDictionary`2">
            <summary>
            Provides the base class for a generic read-only dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <remarks>
            <para>
            An instance of the <b>ReadOnlyDictionary</b> generic class is
            always read-only. A dictionary that is read-only is simply a
            dictionary with a wrapper that prevents modifying the
            dictionary; therefore, if changes are made to the underlying
            dictionary, the read-only dictionary reflects those changes. 
            See <see cref="T:System.Collections.Generic.Dictionary`2"/> for a modifiable version of 
            this class.
            </para>
            <para>
            <b>Notes to Implementers</b> This base class is provided to 
            make it easier for implementers to create a generic read-only
            custom dictionary. Implementers are encouraged to extend this
            base class instead of creating their own. 
            </para>
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:ReadOnlyDictionary`2" /> class that wraps
            the supplied <paramref name="dictionaryToWrap"/>.
            </summary>
            <param name="dictionaryToWrap">The <see cref="T:IDictionary`2" />
            that will be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the dictionary is null.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="key">
            The object to use as the key of the element to add.</param>
            <param name="value">
            The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:ReadOnlyDictionary`2" />
            contains the specified key.</summary>
            <returns>
            True if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            True if the element is successfully removed; otherwise, false.
            </returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value
            associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>
            <b>true</b> if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to add to the <see cref="T:ICollection`1"/>.
            </param>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ICollection`1"/> contains a
            specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:ICollection`1"/>.
            </param>
            <returns>
            <b>true</b> if item is found in the <b>ICollection</b>; 
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a
            particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array that is the
            destination of the elements copied from ICollection.
            The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to remove from the ICollection.
            </param>
            <returns>Will never return a value.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>. 
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from 
            ICollection. The Array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in Array at which copying begins.
            </param>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.
            </summary>
            <value>The number of key/value pairs.</value>
            <returns>The number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</returns>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.Keys">
            <summary>Gets a collection containing the keys in the
            <see cref="T:ReadOnlyDictionary{TKey,TValue}"></see>.</summary>
            <value>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 
            containing the keys.</value>
            <returns>A
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>
            containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2"></see>.
            </returns>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values of the
            <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>Gets a value indicating whether the dictionary is read-only.
            This value will always be true.</summary>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the dictionary
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to dictionary.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <returns>
            The value associated with the specified key. If the specified key
            is not found, a get operation throws a 
            <see cref="T:System.Collections.Generic.KeyNotFoundException" />,
            and a set operation creates a new element with the specified key.
            </returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and key does not exist in the collection.
            </exception>
        </member>
        <member name="T:Dynamsoft.PDF.Common.PDF_Color">
            <summary>
            Base class for Color, serves as wrapper class for <see cref="T:System.Drawing.Color"/>
            to allow extension.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Common.PDF_Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Common.PDF_Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Common.PDF_Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Common.PDF_Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Common.PDF_Color.#ctor(System.Drawing.Color)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="color">a Color object</param>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="P:Dynamsoft.PDF.Common.PDF_Color.R">
            <summary>
            Gets the red component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The red component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Common.PDF_Color.G">
            <summary>
            Gets the green component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The green component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Common.PDF_Color.B">
            <summary>
            Gets the blue component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The blue component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="T:Dynamsoft.PDF.AESCipherCBCnoPad">
            Creates an AES Cipher with CBC and no padding.
            @author Paulo Soares
        </member>
        <member name="M:Dynamsoft.PDF.AESCipherCBCnoPad.#ctor(System.Boolean,System.Byte[])">
            Creates a new instance of AESCipher 
        </member>
        <member name="T:Dynamsoft.PDF.AESCipher">
            Creates an AES Cipher with CBC and padding PKCS5/7.
            @author Paulo Soares
        </member>
        <member name="M:Dynamsoft.PDF.AESCipher.#ctor(System.Boolean,System.Byte[],System.Byte[])">
            Creates a new instance of AESCipher 
        </member>
        <member name="M:Dynamsoft.PDF.ARCFOUREncryption.#ctor">
            Creates a new instance of ARCFOUREncryption 
        </member>
        <member name="T:Dynamsoft.PDF.BufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion. The BufferedBlockCipher outputs a block only when the
            buffer is full and more data is being added, or on a doFinal.
            <p>
            Note: in the case where the underlying cipher is either a CFB cipher or an
            OFB one the last block may not be a multiple of the block size.
            </p>
        </member>
        <member name="T:Dynamsoft.PDF.IBufferedCipher">
            <remarks>Block cipher engines are expected to conform to this interface.</remarks>
        </member>
        <member name="M:Dynamsoft.PDF.IBufferedCipher.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
        </member>
        <member name="M:Dynamsoft.PDF.IBufferedCipher.Reset">
            <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.IBufferedCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.#ctor(Dynamsoft.PDF.IBlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             false otherwise.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Dynamsoft.PDF.BufferedBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Dynamsoft.PDF.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:Dynamsoft.PDF.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Dynamsoft.PDF.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:Dynamsoft.PDF.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:Dynamsoft.PDF.Gost3411Digest">
            implementation of GOST R 34.11-94
        </member>
        <member name="M:Dynamsoft.PDF.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:Dynamsoft.PDF.Gost3411Digest.#ctor(Dynamsoft.PDF.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:Dynamsoft.PDF.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Dynamsoft.PDF.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:Dynamsoft.PDF.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:Dynamsoft.PDF.LongDigest.#ctor(Dynamsoft.PDF.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:Dynamsoft.PDF.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:Dynamsoft.PDF.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="M:Dynamsoft.PDF.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Dynamsoft.PDF.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:Dynamsoft.PDF.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:Dynamsoft.PDF.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="P:Dynamsoft.PDF.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:Dynamsoft.PDF.MD4Digest">
            implementation of MD4 as RFC 1320 by R. Rivest, MIT Laboratory for
            Computer Science and RSA Data Security, Inc.
            <p>
            <b>NOTE</b>: This algorithm is only included for backwards compatibility
            with legacy applications, it's not secure, don't use it for anything new!</p>
        </member>
        <member name="M:Dynamsoft.PDF.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.MD4Digest.#ctor(Dynamsoft.PDF.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Dynamsoft.PDF.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:Dynamsoft.PDF.MD5Digest.#ctor(Dynamsoft.PDF.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Dynamsoft.PDF.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD128Digest.#ctor(Dynamsoft.PDF.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Dynamsoft.PDF.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD160Digest.#ctor(Dynamsoft.PDF.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Dynamsoft.PDF.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD256Digest.#ctor(Dynamsoft.PDF.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Dynamsoft.PDF.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD320Digest.#ctor(Dynamsoft.PDF.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Dynamsoft.PDF.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
        </member>
        <member name="M:Dynamsoft.PDF.Sha1Digest.#ctor(Dynamsoft.PDF.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.Sha224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:Dynamsoft.PDF.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.Sha224Digest.#ctor(Dynamsoft.PDF.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Dynamsoft.PDF.Sha256Digest.#ctor(Dynamsoft.PDF.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.Sha384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Dynamsoft.PDF.Sha384Digest.#ctor(Dynamsoft.PDF.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.Sha3Digest.GetByteLength">
             Return the size of block that the compression function is applied to in bytes.
            
             @return internal byte length of a block.
        </member>
        <member name="T:Dynamsoft.PDF.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Dynamsoft.PDF.Sha512Digest.#ctor(Dynamsoft.PDF.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.Sha512tDigest">
            FIPS 180-4 implementation of SHA-512/t
        </member>
        <member name="M:Dynamsoft.PDF.Sha512tDigest.#ctor(System.Int32)">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.Sha512tDigest.#ctor(Dynamsoft.PDF.Sha512tDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.Sha512tDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:Dynamsoft.PDF.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:Dynamsoft.PDF.TigerDigest.#ctor(Dynamsoft.PDF.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Dynamsoft.PDF.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:Dynamsoft.PDF.WhirlpoolDigest.#ctor(Dynamsoft.PDF.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:Dynamsoft.PDF.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="T:Dynamsoft.PDF.AesFastEngine">
             an implementation of the AES (Rijndael)), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor), they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations), 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each), for a total of 2Kbytes),
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values in each round
             </p>
             <p>
             This file contains the fast version with 8Kbytes of static tables for round precomputation
             </p>
        </member>
        <member name="T:Dynamsoft.PDF.IBlockCipher">
            <remarks>Base interface for a symmetric key block cipher.</remarks>
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipher.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="!:DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="P:Dynamsoft.PDF.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="M:Dynamsoft.PDF.AesFastEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Dynamsoft.PDF.AesFastEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Dynamsoft.PDF.AesFastEngine.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Dynamsoft.PDF.Gost28147Engine">
            implementation of GOST 28147-89
        </member>
        <member name="M:Dynamsoft.PDF.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:Dynamsoft.PDF.Gost28147Engine.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:Dynamsoft.PDF.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="T:Dynamsoft.PDF.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="T:Dynamsoft.PDF.CbcBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.#ctor(Dynamsoft.PDF.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.GetBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Dynamsoft.PDF.CbcBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="P:Dynamsoft.PDF.CbcBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="T:Dynamsoft.PDF.IBlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipherPadding.Init(Dynamsoft.PDF.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Dynamsoft.PDF.IBlockCipherPadding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="P:Dynamsoft.PDF.IBlockCipherPadding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:Dynamsoft.PDF.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in Pkcs5/Pkcs7.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.#ctor(Dynamsoft.PDF.IBlockCipher,Dynamsoft.PDF.IBlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.#ctor(Dynamsoft.PDF.IBlockCipher)">
             Create a buffered block cipher Pkcs7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.Init(System.Boolean,Dynamsoft.PDF.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Dynamsoft.PDF.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * GetBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:Dynamsoft.PDF.Pkcs7Padding">
            A padder that adds Pkcs7/Pkcs5 padding to a block.
        </member>
        <member name="M:Dynamsoft.PDF.Pkcs7Padding.Init(Dynamsoft.PDF.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:Dynamsoft.PDF.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Dynamsoft.PDF.Pkcs7Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:Dynamsoft.PDF.Pkcs7Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:Dynamsoft.PDF.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:Dynamsoft.PDF.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:Dynamsoft.PDF.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Dynamsoft.PDF.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Dynamsoft.PDF.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Dynamsoft.PDF.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:Dynamsoft.PDF.ReversedWindowGenerator">
            <remarks>
            Takes bytes generated by an underling RandomGenerator and reverses the order in
            each small window (of configurable size).
            <p>
            Access to internals is synchronized so a single one of these can be shared.
            </p>
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.ReversedWindowGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Dynamsoft.PDF.ReversedWindowGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Dynamsoft.PDF.ReversedWindowGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Dynamsoft.PDF.ReversedWindowGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:Dynamsoft.PDF.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:Dynamsoft.PDF.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="T:Dynamsoft.PDF.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:Dynamsoft.PDF.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:Dynamsoft.PDF.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.BadElementException">
            <summary>
            Signals an attempt to create an Element that hasn't got the right form.
            </summary>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="T:Dynamsoft.PDF.DocumentException">
            <summary>
            Signals that an error has occurred in a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.BadElementException"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="M:Dynamsoft.PDF.DocumentException.#ctor">
            <summary>
            Constructs a new DocumentException
            </summary>
            <overloads>
            Has two overloads.
            </overloads>
        </member>
        <member name="M:Dynamsoft.PDF.DocumentException.#ctor(System.String)">
            <summary>
            Construct a new DocumentException
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:Dynamsoft.PDF.BadPasswordException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5 It was written for iText 2.0.8, but moved to another package
        </member>
        <member name="M:Dynamsoft.PDF.BadPasswordException.#ctor(System.String)">
            Creates an exception saying the user password was incorrect.
        </member>
        <member name="T:Dynamsoft.PDF.BadPdfFormatException">
             Signals that a bad PDF format has been used to construct a <CODE>PdfObject</CODE>.
            
             @see        PdfException
             @see        PdfBoolean
             @see        PdfNumber
             @see        PdfString
             @see        PdfName
             @see        PdfDictionary
             @see        PdfFont
        </member>
        <member name="T:Dynamsoft.PDF.IllegalPdfSyntaxException">
            Typed exception used when creating PDF syntax that isn't valid.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.IllegalPdfSyntaxException.#ctor(System.String)">
            Creates an exception saying the PDF syntax isn't correct.
            @param	message	some extra info about the exception
        </member>
        <member name="T:Dynamsoft.PDF.InvalidPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.InvalidPdfException.#ctor(System.String)">
            Creates an instance of a NoPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <member name="T:Dynamsoft.PDF.PdfXConformanceException">
            
             @author  psoares
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceException.#ctor">
            Creates a new instance of PdfXConformanceException. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceException.#ctor(System.String)">
            Creates a new instance of PdfXConformanceException.
            @param s
        </member>
        <member name="T:Dynamsoft.PDF.UnsupportedPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document according to iText,
            but it's different from the InvalidPdfException in the sense that it may
            be an iText limitation (most of the times it isn't but you might have
            bumped into something that has been added to the PDF specs, but that isn't
            supported in iText yet).
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.UnsupportedPdfException.#ctor(System.String)">
            Creates an instance of an UnsupportedPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <member name="T:Dynamsoft.PDF.ExtendedColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:Dynamsoft.PDF.PdfReader">
            Reads a PDF document.
            @author Paulo Soares (psoares@consiste.pt)
            @author Kazuya Ujihara
        </member>
        <member name="T:Dynamsoft.PDF.IPdfViewerPreferences">
            Viewer preferences are described in section 3.6.1 and 8.1 of the
            PDF Reference 1.7 (Table 3.25 on p139-142 and Table 8.1 on p579-581).
            They are explained in section 13.1 of the book 'iText in Action'.
            The values of the different preferences were originally stored
            in class PdfWriter, but they have been moved to this separate interface
            for reasons of convenience.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.IPdfViewerPreferences.AddViewerPreference(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.IPdfViewerPreferences.ViewerPreferences" -->
        <member name="F:Dynamsoft.PDF.PdfReader.appendable">
            Holds value of property appendable.
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.String)">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.String,System.Byte[])">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetOffsetTokeniser(Dynamsoft.PDF.IRandomAccessSource)">
            Utility method that checks the provided byte source to see if it has junk bytes at the beginning.  If junk bytes
            are found, construct a tokeniser that ignores the junk.  Otherwise, construct a tokeniser for the byte source as it is
            @param byteSource the source to check
            @return a tokeniser that is guaranteed to start at the PDF header
            @throws IOException if there is a problem reading the byte source
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.Byte[],System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.Uri)">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.Uri,System.Byte[])">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.IO.Stream,System.Byte[])">
            Reads and parses a PDF document.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(System.IO.Stream)">
            Reads and parses a PDF document.
            @param isp the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(Dynamsoft.PDF.RandomAccessFileOrArray,System.Byte[])">
            Reads and parses a pdf document. Contrary to the other constructors only the xref is read
            into memory. The reader is said to be working in "partial" mode as only parts of the pdf
            are read as needed. The pdf is left open but may be closed at any time with
            <CODE>PdfReader.Close()</CODE>, reopen is automatic.
            @param raf the document location
            @param ownerPassword the password or <CODE>null</CODE> for no password
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.#ctor(Dynamsoft.PDF.PdfReader)">
            Creates an independent duplicate.
            @param reader the <CODE>PdfReader</CODE> to duplicate
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageRotation(System.Int32)">
            Gets the page rotation. This value can be 0, 90, 180 or 270.
            @param index the page number. The first page is 1
            @return the page rotation
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ReadDecryptedDocObj">
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObjectRelease(Dynamsoft.PDF.PdfObject)">
            @param obj
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObject(Dynamsoft.PDF.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed.
            @param obj the <CODE>PdfObject</CODE> to read
            @return the resolved <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObjectRelease(Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed. If the reader was opened in partial mode the object will be released
            to save memory.
            @param obj the <CODE>PdfObject</CODE> to read
            @param parent
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObject(Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfObject)">
            @param obj
            @param parent
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObjectRelease(System.Int32)">
            @param idx
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPdfObject(System.Int32)">
            @param idx
            @return aPdfObject
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ResetLastXrefPartial">
            
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ReleaseLastXrefPartial">
            
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ReleaseLastXrefPartial(Dynamsoft.PDF.PdfObject)">
            @param obj
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.AddPdfObject(Dynamsoft.PDF.PdfObject)">
            @param obj
            @return an indirect reference
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.DumpPerc">
            @return the percentage of the cross reference table that has been read
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.KillIndirect(Dynamsoft.PDF.PdfObject)">
            Eliminates the reference to the object freeing the memory used by it and clearing
            the xref entry.
            @param obj the object. If it's an indirect reference it will be eliminated
            @return the object or the already erased dereferenced object
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.FlateDecode(System.Byte[])">
            Decodes a stream that has the FlateDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.DecodePredictor(System.Byte[],Dynamsoft.PDF.PdfObject)">
            @param in
            @param dicPar
            @return a byte array
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.FlateDecode(System.Byte[],System.Boolean)">
            A helper to FlateDecode.
            @param in the input data
            @param strict <CODE>true</CODE> to read a correct stream. <CODE>false</CODE>
            to try to read a corrupted stream
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ASCIIHexDecode(System.Byte[])">
            Decodes a stream that has the ASCIIHexDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ASCII85Decode(System.Byte[])">
            Decodes a stream that has the ASCII85Decode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.LZWDecode(System.Byte[])">
            Decodes a stream that has the LZWDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.IsRebuilt">
            Checks if the document had errors and was rebuilt.
             @return true if rebuilt.
            
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a Dictionary object
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ResetReleasePage">
            
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageContent(System.Int32,Dynamsoft.PDF.RandomAccessFileOrArray)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @param file the location of the PDF document
            @throws IOException on error
            @return the content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetPageContent(System.Int32)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @throws IOException on error
            @return the content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetStreamBytes(Dynamsoft.PDF.PRStream,Dynamsoft.PDF.RandomAccessFileOrArray)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetStreamBytesRaw(Dynamsoft.PDF.PRStream,Dynamsoft.PDF.RandomAccessFileOrArray)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.DecodeBytes(System.Byte[],Dynamsoft.PDF.PdfDictionary)">
            Decode a byte[] applying the filters specified in the provided dictionary using default filter handlers.
            @param b the bytes to decode
            @param streamDictionary the dictionary that contains filter information
            @return the decoded bytes
            @throws IOException if there are any problems decoding the bytes
            @since 5.0.4
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.DecodeBytes(System.Byte[],Dynamsoft.PDF.PdfDictionary,System.Collections.Generic.IDictionary{Dynamsoft.PDF.PdfName,Dynamsoft.PDF.FilterHandlers.IFilterHandler})">
            Decode a byte[] applying the filters specified in the provided dictionary using the provided filter handlers.
            @param b the bytes to decode
            @param streamDictionary the dictionary that contains filter information
            @param filterHandlers the map used to look up a handler for each type of filter
            @return the decoded bytes
            @throws IOException if there are any problems decoding the bytes
            @since 5.0.4
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetStreamBytes(Dynamsoft.PDF.PRStream)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetStreamBytesRaw(Dynamsoft.PDF.PRStream)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.EliminateSharedStreams">
            Eliminates shared streams if they exist. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.IsEncrypted">
            Returns <CODE>true</CODE> if the PDF is encrypted.
            @return <CODE>true</CODE> if the PDF is encrypted
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.Is128Key">
            Returns <CODE>true</CODE> if the PDF has a 128 bit key encryption.
            @return <CODE>true</CODE> if the PDF has a 128 bit key encryption
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ShuffleSubsetNames">
            Finds all the font subsets and changes the prefixes to some
            random values.
            @return the number of font subsets altered
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.CreateFakeFontSubsets">
            Finds all the fonts not subset but embedded and marks them as subset.
            @return the number of fonts altered
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetNamedDestination">
            Gets all the named destinations as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets all the named destinations
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetNamedDestination(System.Boolean)">
            Gets all the named destinations as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets all the named destinations
            @since   2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetNamedDestinationFromNames">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetNamedDestinationFromNames(System.Boolean)">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets the named destinations
            @since   2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.GetNamedDestinationFromStrings">
            Gets the named destinations from the /Names key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.RemoveFields">
            Removes all the fields from the document.
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.RemoveAnnotations">
            Removes all the annotations and fields from the document.
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.ConsolidateNamedDestinations">
            Replaces all the local named links with the actual destinations. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.Close">
            Closes the reader
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.RemoveUnusedObjects">
            Removes all the unreachable objects.
            @return the number of indirect objects removed
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.AddViewerPreference(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
            Adds a viewer preference
            @param key a key for a viewer preference
            @param value a value for the viewer preference
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.IsNewXrefType">
            Getter for property newXrefType.
            @return Value of property newXrefType.
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.IsHybridXref">
            Getter for property hybridXref.
            @return Value of property hybridXref.
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.RemoveUsageRights">
            Removes any usage rights that this PDF may have. Only Adobe can grant usage rights
            and any PDF modification with iText will invalidate them. Invalidated usage rights may
            confuse Acrobat and it's advisabe to remove them altogether.
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.SafeFile">
            Gets a new file instance of the original PDF
            document.
            @return a new file instance of the original PDF document
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.NumberOfPages">
            Gets the number of pages in the document.
            @return the number of pages in the document
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Catalog">
            Returns the document's catalog. This dictionary is not a copy,
            any changes will be reflected in the catalog.
            @return the document's catalog
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Info">
            Returns the content of the document information dictionary as a <CODE>Hashtable</CODE>
            of <CODE>String</CODE>.
            @return content of the document information dictionary
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Tampered">
            Sets the tampered state. A tampered PdfReader cannot be reused in PdfStamper.
            @param tampered the tampered state
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Metadata">
            Gets the XML metadata.
            @throws IOException on error
            @return the XML metadata
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.LastXref">
            Gets the byte address of the last xref table.
            @return the byte address of the last xref table
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.XrefSize">
            Gets the number of xref objects.
            @return the number of xref objects
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.EofPos">
            Gets the byte address of the %%EOF marker.
            @return the byte address of the %%EOF marker
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.PdfVersion">
            Gets the PDF version. Only the last version char is returned. For example
            version 1.4 is returned as '4'.
            @return the PDF version
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Permissions">
            Gets the encryption permissions. It can be used directly in
            <CODE>PdfWriter.SetEncryption()</CODE>.
            @return the encryption permissions
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.Trailer">
            Gets the trailer dictionary
            @return the trailer dictionary
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.SimpleViewerPreferences">
            Returns a bitset representing the PageMode and PageLayout viewer preferences.
            Doesn't return any information about the ViewerPreferences dictionary.
            @return an int that contains the Viewer Preferences.
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.FileLength">
            Getter for property fileLength.
            @return Value of property fileLength.
        </member>
        <member name="P:Dynamsoft.PDF.PdfReader.IsOpenedWithFullPermissions">
            Checks if the document was opened with the owner password so that the end application
            can decide what level of access restrictions to apply. If the document is not encrypted
            it will return <CODE>true</CODE>.
            @return <CODE>true</CODE> if the document was opened with the owner password or if it's not encrypted,
            <CODE>false</CODE> if the document was opened with the user password
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a dictionary object
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.GetPageOrigRefRelease(System.Int32)">
            @param pageNum
            @return an indirect reference
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:Dynamsoft.PDF.PdfReader.PageRefs.ResetReleasePage">
            
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers">
            Encapsulates filter behavior for PDF streams.  Classes generally interace with this
            using the static GetDefaultFilterHandlers() method, then obtain the desired {@link IFilterHandler}
            via a lookup.
            @since 5.0.4
        </member>
        <member name="F:Dynamsoft.PDF.FilterHandlers.defaults">
            The default {@link IFilterHandler}s used by iText 
        </member>
        <member name="M:Dynamsoft.PDF.FilterHandlers.GetDefaultFilterHandlers">
            @return the default {@link IFilterHandler}s used by iText
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.IFilterHandler">
            The main interface for creating a new {@link IFilterHandler}
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_FLATEDECODE">
            Handles FLATEDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_ASCIIHEXDECODE">
            Handles ASCIIHEXDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_ASCII85DECODE">
            Handles ASCIIHEXDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_LZWDECODE">
            Handles LZWDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_CCITTFAXDECODE">
            Handles CCITTFAXDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_DoNothing">
            A filter that doesn't modify the stream at all
        </member>
        <member name="T:Dynamsoft.PDF.FilterHandlers.Filter_RUNLENGTHDECODE">
            Handles RUNLENGTHDECODE filter
        </member>
        <member name="T:Dynamsoft.PDF.IanaEncodings">
            Translates a IANA encoding name to a Java encoding.
        </member>
        <member name="F:Dynamsoft.PDF.IanaEncodings.map">
            The object that maps IANA to Java encodings. 
        </member>
        <member name="T:Dynamsoft.PDF.IExtraEncoding">
            Classes implementing this interface can create custom encodings or
            replace existing ones. It is used in the context of <code>PdfEncoding</code>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.PDF.IExtraEncoding.CharToByte(System.String,System.String)">
            Converts an Unicode string to a byte array according to some encoding.
            @param text the Unicode string
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:Dynamsoft.PDF.IExtraEncoding.CharToByte(System.Char,System.String)">
            Converts an Unicode char to a byte array according to some encoding.
            @param char1 the Unicode char
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:Dynamsoft.PDF.IExtraEncoding.ByteToChar(System.Byte[],System.String)">
            Converts a byte array to an Unicode string according to some encoding.
            @param b the input byte array
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:Dynamsoft.PDF.IPdfXConformance.IsPdfX">
            Checks if the PDF/X Conformance is necessary.
            @return true if the PDF has to be in conformance with any of the PDF/X specifications
        </member>
        <member name="P:Dynamsoft.PDF.IPdfXConformance.PDFXConformance">
            Sets the PDF/X conformance level.
            Allowed values are PDFX1A2001, PDFX32002, PDFA1A and PDFA1B.
            It must be called before opening the document.
            @param pdfxConformance the conformance level
        </member>
        <member name="F:Dynamsoft.PDF.PdfAnnotationsImp.annotations">
            This is the array containing the references to annotations
            that were added to the document.
        </member>
        <member name="F:Dynamsoft.PDF.PdfAnnotationsImp.delayedAnnotations">
            This is an array containg references to some delayed annotations
            (that were added for a page that doesn't exist yet).
        </member>
        <member name="T:Dynamsoft.PDF.PdfViewerPreferencesImp">
            Stores the information concerning viewer preferences,
            and contains the business logic that allows you to set viewer preferences.
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.viewerPreferencesMask">
            The mask to decide if a ViewerPreferences dictionary is needed 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.NONFULLSCREENPAGEMODE_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.DIRECTION_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.PAGE_BOUNDARIES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.PRINTSCALING_PREFERENCES">
            A series of viewer preferences 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.DUPLEX_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.pageLayoutAndMode">
            This value will hold the viewer preferences for the page layout and page mode. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfViewerPreferencesImp.viewerPreferences">
            This dictionary holds the viewer preferences (other than page layout and page mode). 
        </member>
        <member name="M:Dynamsoft.PDF.PdfViewerPreferencesImp.GetViewerPreferences">
            Returns the viewer preferences.
        </member>
        <member name="M:Dynamsoft.PDF.PdfViewerPreferencesImp.GetIndex(Dynamsoft.PDF.PdfName)">
            Given a key for a viewer preference (a PdfName object),
            this method returns the index in the VIEWER_PREFERENCES array.
            @param key    a PdfName referring to a viewer preference
            @return   an index in the VIEWER_PREFERENCES array
        </member>
        <member name="M:Dynamsoft.PDF.PdfViewerPreferencesImp.IsPossibleValue(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfName[])">
            Checks if some value is valid for a certain key.
        </member>
        <member name="M:Dynamsoft.PDF.PdfViewerPreferencesImp.AddViewerPreference(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
            Sets the viewer preferences for printing.
        </member>
        <member name="M:Dynamsoft.PDF.PdfViewerPreferencesImp.AddToCatalog(Dynamsoft.PDF.PdfDictionary)">
            Adds the viewer preferences defined in the preferences parameter to a
            PdfDictionary (more specifically the root or catalog of a PDF file).
            
            @param catalog
        </member>
        <member name="P:Dynamsoft.PDF.PdfViewerPreferencesImp.PageLayoutAndMode">
            Returns the page layout and page mode value.
        </member>
        <member name="P:Dynamsoft.PDF.PdfViewerPreferencesImp.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            
            @param preferences
                       the viewer preferences
            @see PdfWriter#setViewerPreferences
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_COLOR">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_CMYK">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_RGB">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_FONT">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_IMAGE">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_GSTATE">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.PDFXKEY_LAYER">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfXConformanceImp.pdfxConformance">
            The value indicating if the PDF has to be in conformance with PDF/X.
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.IsPdfX">
            Checks if the PDF/X Conformance is necessary.
            @return true if the PDF has to be in conformance with any of the PDF/X specifications
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.IsPdfX1A2001">
            Checks if the PDF has to be in conformance with PDF/X-1a:2001
            @return true of the PDF has to be in conformance with PDF/X-1a:2001
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.IsPdfX32002">
            Checks if the PDF has to be in conformance with PDF/X-3:2002
            @return true of the PDF has to be in conformance with PDF/X-3:2002
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.IsPdfA1">
            Checks if the PDF has to be in conformance with PDFA1
            @return true of the PDF has to be in conformance with PDFA1
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.IsPdfA1A">
            Checks if the PDF has to be in conformance with PDFA1A
            @return true of the PDF has to be in conformance with PDFA1A
        </member>
        <member name="M:Dynamsoft.PDF.PdfXConformanceImp.CheckPDFXConformance(Dynamsoft.PDF.PdfWriter,System.Int32,System.Object)">
            Business logic that checks if a certain object is in conformance with PDF/X.
            @param writer    the writer that is supposed to write the PDF/X file
            @param key       the type of PDF/X conformance that has to be checked
            @param obj1      the object that is checked for conformance
        </member>
        <member name="P:Dynamsoft.PDF.PdfXConformanceImp.PDFXConformance">
            @see com.lowagie.text.pdf.interfaces.PdfXConformance#setPDFXConformance(int)
        </member>
        <member name="T:Dynamsoft.PDF.IntHashtable">
            A Hashtable that uses ints as the keys.
        </member>
        <member name="F:Dynamsoft.PDF.IntHashtable.table">
            The hash table data.
        </member>
        <member name="F:Dynamsoft.PDF.IntHashtable.count">
            The total number of entries in the hash table.
        </member>
        <member name="F:Dynamsoft.PDF.IntHashtable.threshold">
            Rehashes the table when count exceeds this threshold.
        </member>
        <member name="F:Dynamsoft.PDF.IntHashtable.loadFactor">
            The load factor for the hashtable.
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.#ctor(System.Int32,System.Single)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.#ctor(System.Int32)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.#ctor">
            Constructs a new, empty hashtable. A default capacity and load factor
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.IsEmpty">
            Returns true if the hashtable contains no elements.
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.Contains(System.Int32)">
            Returns true if the specified object is an element of the hashtable.
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.ContainsKey(System.Int32)">
            Returns true if the collection contains an element for the key.
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.Rehash">
            Rehashes the content of the table into a bigger table.
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.Remove(System.Int32)">
            Removes the element corresponding to the key. Does nothing if the
        </member>
        <member name="M:Dynamsoft.PDF.IntHashtable.Clear">
            Clears the hash table so that it has no more elements in it.
        </member>
        <member name="P:Dynamsoft.PDF.IntHashtable.Size">
            Returns the number of elements contained in the hashtable.
        </member>
        <member name="P:Dynamsoft.PDF.IntHashtable.Item(System.Int32)">
            Gets the object associated with the specified key in the
        </member>
        <member name="T:Dynamsoft.PDF.ArrayRandomAccessSource">
            A RandomAccessSource that is based on an underlying byte array 
            @since 5.3.5
        </member>
        <member name="T:Dynamsoft.PDF.IRandomAccessSource">
            Represents an abstract source that bytes can be read from.  This class forms the foundation for all byte input in iText. 
            Implementations do not keep track of a current 'position', but rather provide absolute get methods.  Tracking position
            should be handled in classes that use RandomAccessSource internally (via composition).
            @since 5.3.5
        </member>
        <member name="M:Dynamsoft.PDF.IRandomAccessSource.Get(System.Int64)">
            Gets a byte at the specified position
            @param position
            @return the byte, or -1 if EOF is reached
        </member>
        <member name="M:Dynamsoft.PDF.IRandomAccessSource.Get(System.Int64,System.Byte[],System.Int32,System.Int32)">
            Gets an array at the specified position.  If the number of bytes requested cannot be read, the bytes that can be
            read will be placed in bytes and the number actually read will be returned.
            @param position the position in the RandomAccessSource to read from
            @param bytes output buffer
            @param off offset into the output buffer where results will be placed
            @param len the number of bytes to read
            @return the number of bytes actually read, or -1 if the file is at EOF
        </member>
        <member name="M:Dynamsoft.PDF.IRandomAccessSource.Close">
            Closes this source.  The underlying data structure or source (if any) will also be closed
            @throws IOException
        </member>
        <member name="P:Dynamsoft.PDF.IRandomAccessSource.Length">
            @return the length of this source
        </member>
        <member name="T:Dynamsoft.PDF.GroupedRandomAccessSource">
            A RandomAccessSource that is based on a set of underlying sources, treating the sources as if they were a contiguous block of data.
            @since 5.3.5
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.sources">
            The underlying sources (along with some meta data to quickly determine where each source begins and ends)
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.currentSourceEntry">
            Cached value to make multiple reads from the same underlying source more efficient
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.size">
            Cached size of the underlying channel
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.#ctor(System.Collections.Generic.ICollection{Dynamsoft.PDF.IRandomAccessSource})">
            Constructs a new {@link GroupedRandomAccessSource} based on the specified set of sources
            @param sources the sources used to build this group
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.GetStartingSourceIndex(System.Int64)">
            For a given offset, return the index of the source that contains the specified offset.
            This is an optimization feature to help optimize the access of the correct source without having to iterate
            through every single source each time.  It is safe to always return 0, in which case the full set of sources will be searched.
            Subclasses should override this method if they are able to compute the source index more efficiently (for example {@link FileChannelRandomAccessSource} takes advantage of fixed size page buffers to compute the index) 
            @param offset the offset
            @return the index of the input source that contains the specified offset, or 0 if unknown
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.GetSourceEntryForOffset(System.Int64)">
            Returns the SourceEntry that contains the byte at the specified offset  
            sourceReleased is called as a notification callback so subclasses can take care of cleanup when the source is no longer the active source
            @param offset the offset of the byte to look for
            @return the SourceEntry that contains the byte at the specified offset
            @throws IOException if there is a problem with IO (usually the result of the sourceReleased() call)
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.SourceReleased(Dynamsoft.PDF.IRandomAccessSource)">
            Called when a given source is no longer the active source.  This gives subclasses the abilty to release resources, if appropriate. 
            @param source the source that is no longer the active source
            @throws IOException if there are any problems
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.SourceInUse(Dynamsoft.PDF.IRandomAccessSource)">
            Called when a given source is about to become the active source.  This gives subclasses the abilty to retrieve resources, if appropriate. 
            @param source the source that is about to become the active source
            @throws IOException if there are any problems
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.Get(System.Int64)">
            {@inheritDoc} 
            The source that contains the byte at position is retrieved, the correct offset into that source computed, then the value
            from that offset in the underlying source is returned.
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.Get(System.Int64,System.Byte[],System.Int32,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.Close">
            {@inheritDoc}
            Closes all of the underlying sources
        </member>
        <member name="P:Dynamsoft.PDF.GroupedRandomAccessSource.Length">
            {@inheritDoc} 
        </member>
        <member name="T:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry">
            Used to track each source, along with useful meta data 
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.source">
            The underlying source
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.firstByte">
            The first byte (in the coordinates of the GroupedRandomAccessSource) that this source contains
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.lastByte">
            The last byte (in the coordinates of the GroupedRandomAccessSource) that this source contains
        </member>
        <member name="F:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.index">
            The index of this source in the GroupedRandomAccessSource
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.#ctor(System.Int32,Dynamsoft.PDF.IRandomAccessSource,System.Int64)">
            Standard constructor
            @param index the index
            @param source the source
            @param offset the offset of the source in the GroupedRandomAccessSource
        </member>
        <member name="M:Dynamsoft.PDF.GroupedRandomAccessSource.SourceEntry.OffsetN(System.Int64)">
            Given an absolute offset (in the GroupedRandomAccessSource coordinates), calculate the effective offset in the underlying source
            @param absoluteOffset the offset in the parent GroupedRandomAccessSource
            @return the effective offset in the underlying source
        </member>
        <member name="T:Dynamsoft.PDF.IndependentRandomAccessSource">
            A RandomAccessSource that is wraps another RandomAccessSouce but does not propagate close().  This is useful when
            passing a RandomAccessSource to a method that would normally close the source.
            @since 5.3.5
        </member>
        <member name="F:Dynamsoft.PDF.IndependentRandomAccessSource.source">
            The source
        </member>
        <member name="M:Dynamsoft.PDF.IndependentRandomAccessSource.#ctor(Dynamsoft.PDF.IRandomAccessSource)">
            Constructs a new OffsetRandomAccessSource
            @param source the source
        </member>
        <member name="M:Dynamsoft.PDF.IndependentRandomAccessSource.Get(System.Int64)">
            {@inheritDoc}
        </member>
        <member name="M:Dynamsoft.PDF.IndependentRandomAccessSource.Get(System.Int64,System.Byte[],System.Int32,System.Int32)">
            {@inheritDoc}
        </member>
        <member name="M:Dynamsoft.PDF.IndependentRandomAccessSource.Close">
            Does nothing - the underlying source is not closed
        </member>
        <member name="P:Dynamsoft.PDF.IndependentRandomAccessSource.Length">
            {@inheritDoc}
        </member>
        <member name="T:Dynamsoft.PDF.RAFRandomAccessSource">
            
            A RandomAccessSource that uses a {@link RandomAccessFile} as it's source
            Note: Unlike most of the RandomAccessSource implementations, this class is not thread safe
        </member>
        <member name="F:Dynamsoft.PDF.RAFRandomAccessSource.raf">
            The source
        </member>
        <member name="F:Dynamsoft.PDF.RAFRandomAccessSource.length">
            The length of the underling RAF.  Note that the length is cached at construction time to avoid the possibility
            of IOExceptions when reading the length.
        </member>
        <member name="M:Dynamsoft.PDF.RAFRandomAccessSource.#ctor(System.IO.FileStream)">
            Creates this object
            @param raf the source for this RandomAccessSource
            @throws IOException if the RAF can't be read
        </member>
        <member name="M:Dynamsoft.PDF.RAFRandomAccessSource.Get(System.Int64)">
            {@inheritDoc}
        </member>
        <member name="M:Dynamsoft.PDF.RAFRandomAccessSource.Get(System.Int64,System.Byte[],System.Int32,System.Int32)">
            {@inheritDoc}
        </member>
        <member name="M:Dynamsoft.PDF.RAFRandomAccessSource.Close">
            Closes the underlying RandomAccessFile
        </member>
        <member name="P:Dynamsoft.PDF.RAFRandomAccessSource.Length">
            {@inheritDoc}
            Note: the length is determined when the {@link RAFRandomAccessSource} is constructed.  If the file length changes
            after construction, that change will not be reflected in this call.
        </member>
        <member name="T:Dynamsoft.PDF.RandomAccessSourceFactory">
             Factory to create {@link RandomAccessSource} objects based on various types of sources
             @since 5.3.5
            
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessSourceFactory.forceRead">
            whether the full content of the source should be read into memory at construction
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessSourceFactory.usePlainRandomAccess">
            Whether {@link RandomAccessFile} should be used instead of a {@link FileChannel}, where applicable
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessSourceFactory.exclusivelyLockFile">
            Whether the underlying file should have a RW lock on it or just an R lock
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.#ctor">
            Creates a factory that will give preference to accessing the underling data source using memory mapped files
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.SetForceRead(System.Boolean)">
            Determines whether the full content of the source will be read into memory
            @param forceRead true if the full content will be read, false otherwise
            @return this object (this allows chaining of method calls)
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateSource(System.Byte[])">
            Creates a {@link RandomAccessSource} based on a byte array
            @param data the byte array
            @return the newly created {@link RandomAccessSource}
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateSource(System.Uri)">
            Creates a {@link RandomAccessSource} based on a URL.  The data available at the URL is read into memory and used
            as the source for the {@link RandomAccessSource}
            @param url the url to read from
            @return the newly created {@link RandomAccessSource}
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateSource(System.IO.Stream)">
            Creates a {@link RandomAccessSource} based on an {@link InputStream}.  The full content of the InputStream is read into memory and used
            as the source for the {@link RandomAccessSource}
            @param is the stream to read from
            @return the newly created {@link RandomAccessSource}
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateBestSource(System.String)">
            Creates a {@link RandomAccessSource} based on a filename string.
            If the filename describes a URL, a URL based source is created
            If the filename describes a file on disk, the contents may be read into memory (if forceRead is true), opened using memory mapped file channel (if usePlainRandomAccess is false), or opened using {@link RandomAccessFile} access (if usePlainRandomAccess is true)
            This call will automatically failover to using {@link RandomAccessFile} if the memory map operation fails
            @param filename the name of the file or resource to create the {@link RandomAccessSource} for
            @return the newly created {@link RandomAccessSource}
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateByReadingToMemory(System.String)">
            Creates a new {@link RandomAccessSource} by reading the specified file/resource into memory
            @param filename the name of the resource to read
            @return the newly created {@link RandomAccessSource}
            @throws IOException if reading the underling file or stream fails
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessSourceFactory.CreateByReadingToMemory(System.IO.Stream)">
            Creates a new {@link RandomAccessSource} by reading the specified file/resource into memory
            @param filename the name of the resource to read
            @return the newly created {@link RandomAccessSource}
            @throws IOException if reading the underling file or stream fails
        </member>
        <member name="T:Dynamsoft.PDF.StreamUtil">
             Utility class with commonly used stream operations
             @since 5.3.5
            
        </member>
        <member name="M:Dynamsoft.PDF.StreamUtil.InputStreamToArray(System.IO.Stream)">
            Reads the full content of a stream and returns them in a byte array
            @param is the stream to read
            @return a byte array containing all of the bytes from the stream
            @throws IOException if there is a problem reading from the input stream
        </member>
        <member name="M:Dynamsoft.PDF.StreamUtil.GetResourceStream(System.String)">
            Gets the font resources.
            @param key the name of the resource
            @return the <CODE>Stream</CODE> to get the resource or
            <CODE>null</CODE> if not found
        </member>
        <member name="T:Dynamsoft.PDF.WindowRandomAccessSource">
            A RandomAccessSource that wraps another RandomAccessSouce and provides a window of it at a specific offset and over
            a specific length.  Position 0 becomes the offset position in the underlying source.
            @since 5.3.5
        </member>
        <member name="F:Dynamsoft.PDF.WindowRandomAccessSource.source">
            The source
        </member>
        <member name="F:Dynamsoft.PDF.WindowRandomAccessSource.offset">
            The amount to offset the source by
        </member>
        <member name="F:Dynamsoft.PDF.WindowRandomAccessSource.length">
            The length
        </member>
        <member name="M:Dynamsoft.PDF.WindowRandomAccessSource.#ctor(Dynamsoft.PDF.IRandomAccessSource,System.Int64)">
            Constructs a new OffsetRandomAccessSource that extends to the end of the underlying source
            @param source the source
            @param offset the amount of the offset to use
        </member>
        <member name="M:Dynamsoft.PDF.WindowRandomAccessSource.#ctor(Dynamsoft.PDF.IRandomAccessSource,System.Int64,System.Int64)">
            Constructs a new OffsetRandomAccessSource with an explicit length
            @param source the source
            @param offset the amount of the offset to use
            @param length the number of bytes to be included in this RAS
        </member>
        <member name="M:Dynamsoft.PDF.WindowRandomAccessSource.Get(System.Int64)">
            {@inheritDoc}
            Note that the position will be adjusted to read from the corrected location in the underlying source
        </member>
        <member name="M:Dynamsoft.PDF.WindowRandomAccessSource.Get(System.Int64,System.Byte[],System.Int32,System.Int32)">
            {@inheritDoc}
            Note that the position will be adjusted to read from the corrected location in the underlying source
        </member>
        <member name="M:Dynamsoft.PDF.WindowRandomAccessSource.Close">
            {@inheritDoc}
        </member>
        <member name="P:Dynamsoft.PDF.WindowRandomAccessSource.Length">
            {@inheritDoc}
            Note that the length will be adjusted to read from the corrected location in the underlying source
        </member>
        <member name="T:Dynamsoft.PDF.ListIterator`1">
            <summary>
            Summary description for ListIterator.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.PdfAnnotation">
             A <CODE>PdfAnnotation</CODE> is a note that is associated with a page.
            
             @see     PdfDictionary
        </member>
        <member name="F:Dynamsoft.PDF.PdfAnnotation.MARKUP_SQUIGGLY">
            attributevalue 
        </member>
        <member name="F:Dynamsoft.PDF.PdfAnnotation.used">
            Holds value of property used. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfAnnotation.placeInPage">
            Holds value of property placeInPage. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfAnnotation.#ctor(Dynamsoft.PDF.PdfWriter,System.Single,System.Single,System.Single,System.Single,Dynamsoft.PDF.PdfString,Dynamsoft.PDF.PdfString)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype text.
        </member>
        <member name="M:Dynamsoft.PDF.PdfAnnotation.SetHighlighting(Dynamsoft.PDF.PdfName)">
            Sets the annotation's highlighting mode. The values can be
            <CODE>HIGHLIGHT_NONE</CODE>, <CODE>HIGHLIGHT_INVERT</CODE>,
            <CODE>HIGHLIGHT_OUTLINE</CODE> and <CODE>HIGHLIGHT_PUSH</CODE>;
            @param highlight the annotation's highlighting mode
        </member>
        <member name="M:Dynamsoft.PDF.PdfAnnotation.IsForm">
            Getter for property form.
            @return Value of property form.
        </member>
        <member name="M:Dynamsoft.PDF.PdfAnnotation.IsAnnotation">
            Getter for property annotation.
            @return Value of property annotation.
        </member>
        <member name="P:Dynamsoft.PDF.PdfAnnotation.PlaceInPage">
            Getter for property placeInPage.
            @return Value of property placeInPage.
        </member>
        <member name="P:Dynamsoft.PDF.PdfAnnotation.Name">
            Sets the name of the annotation.
            With this name the annotation can be identified among
            all the annotations on a page (it has to be unique).
        </member>
        <member name="T:Dynamsoft.PDF.PdfAnnotation.PdfImportedLink">
            This class processes links from imported pages so that they may be active. The following example code reads a group
            of files and places them all on the output PDF, four pages in a single page, keeping the links active.
            <pre>
            String[] files = new String[] {&quot;input1.pdf&quot;, &quot;input2.pdf&quot;};
            String outputFile = &quot;output.pdf&quot;;
            int firstPage=1;
            Document document = new Document();
            PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream(outputFile));
            document.SetPageSize(PageSize.A4);
            float W = PageSize.A4.GetWidth() / 2;
            float H = PageSize.A4.GetHeight() / 2;
            document.Open();
            PdfContentByte cb = writer.GetDirectContent();
            for (int i = 0; i &lt; files.length; i++) {
               PdfReader currentReader = new PdfReader(files[i]);
               currentReader.ConsolidateNamedDestinations();
               for (int page = 1; page &lt;= currentReader.GetNumberOfPages(); page++) {
                   PdfImportedPage importedPage = writer.GetImportedPage(currentReader, page);
                   float a = 0.5f;
                   float e = (page % 2 == 0) ? W : 0;
                   float f = (page % 4 == 1 || page % 4 == 2) ? H : 0;
                   ArrayList links = currentReader.GetLinks(page);
                   cb.AddTemplate(importedPage, a, 0, 0, a, e, f);
                   for (int j = 0; j &lt; links.Size(); j++) {
                       PdfAnnotation.PdfImportedLink link = (PdfAnnotation.PdfImportedLink)links.Get(j);
                       if (link.IsInternal()) {
                           int dPage = link.GetDestinationPage();
                           int newDestPage = (dPage-1)/4 + firstPage;
                           float ee = (dPage % 2 == 0) ? W : 0;
                           float ff = (dPage % 4 == 1 || dPage % 4 == 2) ? H : 0;
                           link.SetDestinationPage(newDestPage);
                           link.TransformDestination(a, 0, 0, a, ee, ff);
                       }
                       link.TransformRect(a, 0, 0, a, e, f);
                       writer.AddAnnotation(link.CreateAnnotation(writer));
                   }
                   if (page % 4 == 0)
                   document.NewPage();
               }
               if (i &lt; files.length - 1)
               document.NewPage();
               firstPage += (currentReader.GetNumberOfPages()+3)/4;
            }
            document.Close();
            </pre>
        </member>
        <member name="M:Dynamsoft.PDF.PdfAnnotation.PdfImportedLink.ToString">
            Returns a String representation of the link.
            @return	a String representation of the imported link
            @since	2.1.6
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfArray" -->
        <member name="F:Dynamsoft.PDF.PdfArray.arrayList">
            this is the actual array of PdfObjects 
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.#ctor">
            Constructs an empty <CODE>PdfArray</CODE>-object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.#ctor(Dynamsoft.PDF.PdfObject)">
             Constructs an <CODE>PdfArray</CODE>-object, containing 1 <CODE>PdfObject</CODE>.
            
             @param    object        a <CODE>PdfObject</CODE> that has to be added to the array
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.#ctor(System.Collections.ArrayList)">
            Constructs a PdfArray with the elements of an ArrayList.
            Throws a ClassCastException if the ArrayList contains something
            that isn't a PdfObject.
            @param   l   an ArrayList with PdfObjects
            @since 2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.#ctor(Dynamsoft.PDF.PdfArray)">
             Constructs an <CODE>PdfArray</CODE>-object, containing all the <CODE>PdfObject</CODE>s in a given <CODE>PdfArray</CODE>.
            
             @param    array        a <CODE>PdfArray</CODE> that has to be added to the array
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.ToPdf(Dynamsoft.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.Remove(System.Int32)">
            Remove the element at the specified position from the array.
            
            Shifts any subsequent elements to the left (subtracts one from their
            indices).
            
            @param idx The index of the element to be removed.
            @throws IndexOutOfBoundsException the specified position doesn't exist
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.IsEmpty">
            Returns <CODE>true</CODE> if the array is empty.
            
            @return <CODE>true</CODE> if the array is empty
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.Add(Dynamsoft.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> to the <CODE>PdfArray</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to add
             @return        <CODE>true</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.Add(System.Int32,Dynamsoft.PDF.PdfObject)">
             Inserts the specified element at the specified position.
             
             Shifts the element currently at that position (if any) and
             any subsequent elements to the right (adds one to their indices).
            
             @param index The index at which the specified element is to be inserted
             @param element The element to be inserted
             @throws IndexOutOfBoundsException if the specified index is larger than the
               last position currently set, plus 1. 
             @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.AddFirst(Dynamsoft.PDF.PdfObject)">
             Inserts a <CODE>PdfObject</CODE> at the beginning of the
             <CODE>PdfArray</CODE>.
             
             The <CODE>PdfObject</CODE> will be the first element, any other elements
             will be shifted to the right (adds one to their indices).
            
             @param object The <CODE>PdfObject</CODE> to add
        </member>
        <member name="M:Dynamsoft.PDF.PdfArray.Contains(Dynamsoft.PDF.PdfObject)">
             Checks if the <CODE>PdfArray</CODE> allready contains a certain <CODE>PdfObject</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to check
             @return        <CODE>true</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfArray.Item(System.Int32)">
            Overwrites a specified location of the array.
            
            @param idx The index of the element to be overwritten
            @param obj new value for the specified index
            @throws IndexOutOfBoundsException if the specified position doesn't exist
            @return the previous value
            @since 2.1.5
        </member>
        <member name="P:Dynamsoft.PDF.PdfArray.ArrayList">
             Returns an ArrayList containing <CODE>PdfObject</CODE>s.
            
             @return        an ArrayList
        </member>
        <member name="P:Dynamsoft.PDF.PdfArray.Size">
             Returns the number of entries in the array.
            
             @return        the size of the ArrayList
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfBoolean" -->
        <member name="F:Dynamsoft.PDF.PdfBoolean.TRUE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfBoolean.FALSE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:Dynamsoft.PDF.PdfBoolean.value">
            the bool value of this object 
        </member>
        <member name="M:Dynamsoft.PDF.PdfBoolean.#ctor(System.Boolean)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfBoolean.#ctor(System.String)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>, represented as a <CODE>string</CODE>
            
             @throws        BadPdfFormatException    thrown if the <VAR>value</VAR> isn't '<CODE>true</CODE>' or '<CODE>false</CODE>'
        </member>
        <member name="P:Dynamsoft.PDF.PdfBoolean.BooleanValue">
             Returns the primitive value of the <CODE>PdfBoolean</CODE>-object.
            
             @return        the actual value of the object.
        </member>
        <member name="T:Dynamsoft.PDF.PdfBorderDictionary">
             A <CODE>PdfBorderDictionary</CODE> define the appearance of a Border (Annotations).
            
             @see     PdfDictionary
        </member>
        <member name="M:Dynamsoft.PDF.PdfBorderDictionary.#ctor(System.Single,System.Int32)">
            Constructs a <CODE>PdfBorderDictionary</CODE>.
        </member>
        <member name="T:Dynamsoft.PDF.PdfColor">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="M:Dynamsoft.PDF.PdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a new <CODE>PdfColor</CODE>.
            
             @param        red            a value between 0 and 255
             @param        green        a value between 0 and 255
             @param        blue        a value between 0 and 255
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfDate" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfString" -->
        <member name="F:Dynamsoft.PDF.PdfString.value">
            The value of this object. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfString.encoding">
            The encoding. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.#ctor">
            Constructs an empty <CODE>PdfString</CODE>-object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.#ctor(System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.#ctor(System.String,System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
             @param        encoding    an encoding
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.#ctor(System.Byte[])">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        bytes    an array of <CODE>byte</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.ToPdf(Dynamsoft.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfString</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:Dynamsoft.PDF.PdfString.ToString">
             Returns the <CODE>string</CODE> value of the <CODE>PdfString</CODE>-object.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfString.Encoding">
             Gets the encoding of this string.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDate.#ctor(System.DateTime)">
             Constructs a <CODE>PdfDate</CODE>-object.
            
             @param       d           the date that has to be turned into a <CODE>PdfDate</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfDate.#ctor">
            Constructs a <CODE>PdfDate</CODE>-object, representing the current day and time.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDate.SetLength(System.Int32,System.Int32)">
             Adds a number of leading zeros to a given <CODE>string</CODE> in order to get a <CODE>string</CODE>
             of a certain length.
            
             @param       i           a given number
             @param       length      the length of the resulting <CODE>string</CODE>
             @return      the resulting <CODE>string</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDate.GetW3CDate">
            Gives the W3C format of the PdfDate.
            @return a formatted date
        </member>
        <member name="M:Dynamsoft.PDF.PdfDate.GetW3CDate(System.String)">
            Gives the W3C format of the PdfDate.
            @param d the date in the format D:YYYYMMDDHHmmSSOHH'mm'
            @return a formatted date
        </member>
        <member name="T:Dynamsoft.PDF.PdfEncodings">
            Supports fast encodings for winansi and PDFDocEncoding.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfEncodings.ConvertToBytes(System.Char,System.String)" -->
        <member name="M:Dynamsoft.PDF.PdfEncodings.IsPdfDocEncoding(System.String)">
            Checks is <CODE>text</CODE> only has PdfDocEncoding characters.
            @param text the <CODE>String</CODE> to test
            @return <CODE>true</CODE> if only PdfDocEncoding characters are present
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncodings.CRLF_CID_NEWLINE">
            Assumes that '\\n' and '\\r\\n' are the newline sequences. It may not work for
            all CJK encodings. To be used with LoadCmap().
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncodings.ClearCmap(System.String)">
            Clears the CJK cmaps from the cache. If <CODE>name</CODE> is the
            empty string then all the cache is cleared. Calling this method
            has no consequences other than the need to reload the cmap
            if needed.
            @param name the name of the cmap to clear or all the cmaps if the empty string
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncodings.LoadCmap(System.String,System.Byte[][])">
            Loads a CJK cmap to the cache with the option of associating
            sequences to the newline.
            @param name the CJK cmap name
            @param newline the sequences to be replaced bi a newline in the resulting CID. See <CODE>CRLF_CID_NEWLINE</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:Dynamsoft.PDF.PdfEncodings.AddExtraEncoding(System.String,Dynamsoft.PDF.IExtraEncoding)">
            Adds an extra encoding.
            @param name the name of the encoding. The encoding recognition is case insensitive
            @param enc the conversion class
        </member>
        <member name="T:Dynamsoft.PDF.PdfEncryption">
            
             @author  Paulo Soares
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.key">
            The encryption key for a particular object/generation 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.keySize">
            The encryption key length for a particular object/generation 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.mkey">
            The global encryption key 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.extra">
            Work area to prepare the object/generation bytes 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.md5">
            The message digest algorithm MD5 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.ownerKey">
            The encryption key for the owner 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.userKey">
            The encryption key for the user 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.permissions">
            The public key security handler for certificate encryption 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.keyLength">
            The generic key length. It may be 40 or 128. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfEncryption.embeddedFilesOnly">
            Indicates if the encryption is only necessary for embedded files.
            @since 2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.IsEmbeddedFilesOnly">
            Indicates if only the embedded files have to be encrypted.
            @return  if true only the embedded files will be encrypted
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.ComputeOwnerKey(System.Byte[],System.Byte[])">
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.SetupGlobalEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            
             ownerKey, documentID must be setuped
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.SetupUserKey">
            
             mkey must be setuped
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.SetupByUserPad(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
        </member>
        <member name="M:Dynamsoft.PDF.PdfEncryption.SetupByOwnerPassword(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32)">
        </member>
        <member name="T:Dynamsoft.PDF.PdfGState">
            The graphic state dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_NORMAL">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_COMPATIBLE">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_MULTIPLY">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_SCREEN">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_OVERLAY">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_DARKEN">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_LIGHTEN">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_COLORDODGE">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_COLORBURN">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_HARDLIGHT">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_SOFTLIGHT">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_DIFFERENCE">
            A possible blend mode 
        </member>
        <member name="F:Dynamsoft.PDF.PdfGState.BM_EXCLUSION">
            A possible blend mode 
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.OverPrintStroking">
            Sets the flag whether to apply overprint for stroking.
            @param ov
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.OverPrintNonStroking">
            Sets the flag whether to apply overprint for non stroking painting operations.
            @param ov
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.OverPrintMode">
            Sets the flag whether to toggle knockout behavior for overprinted objects.
            @param ov - accepts 0 or 1
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.StrokeOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for stroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.FillOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for nonstroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.AlphaIsShape">
            The alpha source flag specifying whether the current soft mask
            and alpha constant are to be interpreted as shape values (true)
            or opacity values (false). 
            @param v
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.TextKnockout">
            Determines the behaviour of overlapping glyphs within a text object
            in the transparent imaging model.
            @param v
        </member>
        <member name="P:Dynamsoft.PDF.PdfGState.BlendMode">
            The current blend mode to be used in the transparent imaging model.
            @param bm
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfIndirectReference" -->
        <member name="F:Dynamsoft.PDF.PdfIndirectReference.number">
            the object number 
        </member>
        <member name="F:Dynamsoft.PDF.PdfIndirectReference.generation">
            the generation number 
        </member>
        <member name="M:Dynamsoft.PDF.PdfIndirectReference.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:Dynamsoft.PDF.PdfIndirectReference.#ctor(System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
        </member>
        <member name="P:Dynamsoft.PDF.PdfIndirectReference.Number">
             Returns the number of the object.
            
             @return        a number.
        </member>
        <member name="P:Dynamsoft.PDF.PdfIndirectReference.Generation">
             Returns the generation of the object.
            
             @return        a number.
        </member>
        <member name="T:Dynamsoft.PDF.PdfLiteral">
            a Literal
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfName" -->
        <member name="F:Dynamsoft.PDF.PdfName._3D">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.A">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.A85">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ABSOLUTECOLORIMETRIC">
            A name
            @since 2.1.5 renamed from ABSOLUTECALORIMETRIC
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ACROFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ACTION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ACTUALTEXT">
            a name used in PDF structure
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE_PKCS7_DETACHED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE_PKCS7_S4">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE_PKCS7_S5">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE_PKCS7_SHA1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADBE_X509_RSA_SHA1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADOBE_PPKLITE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ADOBE_PPKMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AESV2">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AESV3">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AHX">
            A name
            @since 5.0.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AIS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ALLPAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ALT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ALTERNATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ANNOT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ANNOTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ANTIALIAS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.APPDEFAULT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ART">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ARTBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ASCENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ASCII85DECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ASCIIHEXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ASSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ASSETS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AUTHEVENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.AUTHOR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.B">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BACKGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BASEENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BASEFONT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BASEVERSION">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BIBENTRY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BIGFIVE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BINDING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BINDINGMATERIALNAME">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BITSPERCOMPONENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BITSPERSAMPLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BL">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BLACKIS1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BLACKPOINT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BLOCKQUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BLEEDBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BLINDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BORDER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BOUNDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BTN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.BYTERANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.C">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.C0">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.C1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ca_">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CALGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CALRGB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CAPHEIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CAPTION">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CATALOG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CATEGORY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CCITTFAXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CENTER">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CENTERWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CERT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CFM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CHARPROCS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIDFONTTYPE0">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIDFONTTYPE2">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIDSET">
            A name
            @since 2.0.7
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIDSYSTEMINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIDTOGIDMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CIRCLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CMD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CODE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLORS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLORSPACE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTIONFIELD">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTIONITEM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTIONSCHEMA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTIONSORT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLLECTIONSUBITEM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COLUMNS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONDITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONFIGURATIONS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONTACTINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CONTENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COORDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COUNT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COURIER">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COURIER_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COURIER_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.COURIER_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CREATIONDATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CREATOR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CREATORINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CROPBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CRYPT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CUEPOINT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.CUEPOINTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.D">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DATA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DCTDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DECODEPARMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEFAULT">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEFAULTCRYPTFILTER">
            A name
            @since	2.1.5 renamed from DEFAULTCRYPTFILER
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEFAULTCMYK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEFAULTGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEFAULTRGB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DESC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DESCENDANTFONTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DESCENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEST">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DESTOUTPUTPROFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DESTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEVICEGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEVICERGB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DEVICECMYK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DIFFERENCES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DISSOLVE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DIRECTION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DISPLAYDOCTITLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DIV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DOCMDP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DOCOPEN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DOCUMENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DOMAIN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DUR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DUPLEX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DUPLEXFLIPSHORTEDGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DUPLEXFLIPLONGEDGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.DW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.E">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EARLYCHANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EFF">
            A name
            @since	2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EFOPEN">
            A name
            @since	2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EMBEDDED">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EMBEDDEDFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EMBEDDEDFILES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENCODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENCODEDBYTEALIGN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENCRYPT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENCRYPTMETADATA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENDOFBLOCK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ENDOFLINE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXTEND">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXTENSIONS">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXTENSIONLEVEL">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXTGSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXPORT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EXPORTSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.EVENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.F">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FDECODEPARMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FDF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FFILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIELDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIGURE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FILEATTACHMENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FILESPEC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIRST">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIRSTCHAR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIRSTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FIT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITBH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITBV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FITWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FL">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FLAGS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FLASH">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FLASHVARS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FLATEDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTBBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTDESCRIPTOR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTFILE2">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTFILE3">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTMATRIX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FONTNAME">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FOREGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FORM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FORMTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FORMULA">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FREETEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FRM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FULLSCREEN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FUNCTION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FUNCTIONS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.FUNCTIONTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GAMMA">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GBK">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GLITTER">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GOTO">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GOTOE">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GOTOR">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GROUP">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GTS_PDFA1">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GTS_PDFX">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.GTS_PDFXVERSION">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H1">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H2">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H3">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H4">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H5">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.H6">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HEIGHT">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HELV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HELVETICA">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HELVETICA_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HELVETICA_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HELVETICA_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HID">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HIDE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HIDEMENUBAR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HIDETOOLBAR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HIDEWINDOWUI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HIGHLIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.HOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.I">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ICCBASED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ID">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IDENTITY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMAGEB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMAGEC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMAGEI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMAGEMASK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INDEX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INDEXED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INFO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INKLIST">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INSTANCES">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IMPORTDATA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.INTERPOLATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ISMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IRT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ITALICANGLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ITXT">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.IX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.JAVASCRIPT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.JBIG2DECODE">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.JBIG2GLOBALS">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.JPXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.JS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.K">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.KEYWORDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.KIDS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.L">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.L2R">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LANG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LANGUAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LAST">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LASTCHAR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LASTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LAUNCH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LBL">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LENGTH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LENGTH1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LI">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LIMITS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LINE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LINEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LINK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LISTMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LOCATION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LOCK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LOCKED">
            A name
            @since	2.1.2
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.LZWDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.M">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MATERIAL">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MATRIX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MAC_EXPERT_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MAC_ROMAN_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MARKED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MARKINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MASK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MAX_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MAX
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MAX_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MAXLEN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MEDIABOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MCID">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MCR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.METADATA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MIN_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MIN
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MIN_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MMTYPE1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.MODDATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N0">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N2">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N3">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.N4">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NAME">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NAMED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NAMES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NAVIGATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NAVIGATIONPANE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NEEDAPPEARANCES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NEWWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NEXTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NONE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NONFULLSCREENPAGEMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NONSTRUCT">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NUMCOPIES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.NUMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.O">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OBJ">
            A name used with Document Structure
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OBJR">
            a name used with Doucment Structure
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OBJSTM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OCG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OCGS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OCMD">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OCPROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.Off_">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OFF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ON">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ONECOLUMN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OPEN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OPENACTION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.op_">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OPM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OPT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ORDER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ORDERING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OSCILLATING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OUTLINES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OUTPUTCONDITION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OUTPUTCONDITIONIDENTIFIER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OUTPUTINTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.OUTPUTINTENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.P">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAGELABELS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAGELAYOUT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAGEMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PAINTTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PANOSE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PARAMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PARENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PARENTTREE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PARENTTREENEXTKEY">
            A name used in defining Document Structure.
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PART">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PASSCONTEXTCLICK">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PATTERN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PATTERNTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PC">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PDF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PDFDOCENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PERCEPTUAL">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PERMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PI">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PICKTRAYBYPDFSIZE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PLAYCOUNT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.POPUP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.POSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PREDICTOR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PREFERRED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRESERVERB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PREV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PREVPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINTAREA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINTCLIP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINTPAGERANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINTSCALING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRINTSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRIVATE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PROCSET">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PRODUCER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PUBSEC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PV">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.Q">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.QUADPOINTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.QUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.R">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.R2L">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RBGROUPS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.REASON">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RECIPIENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RECT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.REFERENCE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.REGISTRY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.REGISTRYNAME">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RELATIVECOLORIMETRIC">
            A name
            @since	2.1.5 renamed from RELATIVECALORIMETRIC
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RENDITION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RESETFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RESOURCES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIACOMMAND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIACONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIACONTENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIADEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAEXECUTE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAINSTANCE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAPARAMS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAPOSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAPRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIASETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RICHMEDIAWINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ROLEMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ROOT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ROTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ROWS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RUBY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RUNLENGTHDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.RV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.S">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SATURATION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SCHEMA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SCREEN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SCRIPTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SECT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SEPARATION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SETOCGSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SHADING">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SHADINGTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SHIFT_JIS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SIG">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SIGFLAGS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SIGREF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SIMPLEX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SINGLEPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SIZE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SMASK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SORT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SOUND">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SPAN">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SPEED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SPLIT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SQUARE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SQUIGGLY">
            A name
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ST">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STAMP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STANDARD">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STDCF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STEMV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STMF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STRF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STRIKEOUT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STRUCTPARENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STRUCTPARENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STRUCTTREEROOT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.STYLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SUBFILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SUBJECT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SUBMITFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SUBTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SUPPLEMENT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SV">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.SYMBOL">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.T">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TA">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TABLE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TABS">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TD">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TFOOT">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TH">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.THEAD">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.THUMB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.THREADS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TIME">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TILINGTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TIMES_ROMAN">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TIMES_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TIMES_ITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TIMES_BOLDITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TITLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TK">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TOC">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TOCI">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TOGGLE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TOOLBAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TOUNICODE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TABLEROW">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRANS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRANSFORMPARAMS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRANSFORMMETHOD">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRANSPARENCY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRANSPARENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRAPPED">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRIMBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TRUETYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TU">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TWOCOLUMNLEFT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TWOCOLUMNRIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TWOPAGELEFT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TWOPAGERIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TYPE0">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TYPE1">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.TYPE3">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.U">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UF">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UHC">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UNDERLINE">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UR">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.UR3">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.URI">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.URL">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USEATTACHMENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USENONE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USEOC">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USEOUTLINES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USER">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USERPROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USERUNIT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.USETHUMBS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.V">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.V2">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VERISIGN_PPKVS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VERSION">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIDEO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEW">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEWS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEWAREA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEWCLIP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEWERPREFERENCES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VIEWSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VISIBLEPAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.VOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.W">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.W2">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WARICHU">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WC">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIDGET">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIDTH">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIDTHS">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIN">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIN_ANSI_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WINDOWED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WIPE">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WHITEPOINT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.WS">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.X">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XFA">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XML">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XOBJECT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XSTEP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XREF">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XREFSTM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.XYZ">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.YSTEP">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ZADB">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ZAPFDINGBATS">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ZOOM">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ZOOMX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ZOOMY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.POSITIONX">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.POSITIONY">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ORIGINALIMAGEWIDTH">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.ORIGINALIMAGEHEIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.PDFHEIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.PDF.PdfName.staticNames">
            map strings to all known static names
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.#cctor">
            Use reflection to cache all the static public final names so
            future <code>PdfName</code> additions don't have to be "added twice".
            A bit less efficient (around 50ms spent here on a 2.2ghz machine),
             but Much Less error prone.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.#ctor(System.String)">
            Constructs a new <CODE>PdfName</CODE>. The name length will be checked.
            @param name the new name
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.#ctor(System.String,System.Boolean)">
            Constructs a new <CODE>PdfName</CODE>.
            @param name the new name
            @param lengthCheck if <CODE>true</CODE> check the lenght validity, if <CODE>false</CODE> the name can
            have any length
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfName.CompareTo(System.Object)" -->
        <member name="M:Dynamsoft.PDF.PdfName.Equals(System.Object)">
             Indicates whether some other object is "equal to" this one.
            
             @param   obj   the reference object with which to compare.
             @return  <code>true</code> if this object is the same as the obj
                      argument; <code>false</code> otherwise.
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.GetHashCode">
             Returns a hash code value for the object. This method is
             supported for the benefit of hashtables such as those provided by
             <code>java.util.Hashtable</code>.
            
             @return  a hash code value for this object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.EncodeName(System.String)">
             Encodes a plain name given in the unescaped form "AB CD" into "/AB#20CD".
            
             @param name the name to encode
             @return the encoded name
             @since	2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfName.DecodeName(System.String)">
            Decodes an escaped name in the form "/AB#20CD" into "AB CD".
            @param name the name to decode
            @return the decoded name
        </member>
        <member name="T:Dynamsoft.PDF.PdfNameTree">
            Creates a name tree.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.PDF.PdfNameTree.IterateItems(Dynamsoft.PDF.PdfDictionary,System.Collections.Hashtable)">
            Creates a name tree.
            @param items the item of the name tree. The key is a <CODE>String</CODE>
            and the value is a <CODE>PdfObject</CODE>. Note that although the
            keys are strings only the lower byte is used and no check is made for chars
            with the same lower byte and different upper byte. This will generate a wrong
            tree name.
            @param writer the writer
            @throws IOException on error
            @return the dictionary with the name tree. This dictionary is the one
            generally pointed to by the key /Dests, for example
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfNull" -->
        <member name="F:Dynamsoft.PDF.PdfNull.PDFNULL">
            This is an instance of the <CODE>PdfNull</CODE>-object. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfNull.#ctor" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfNumber" -->
        <member name="F:Dynamsoft.PDF.PdfNumber.value">
            actual value of this <CODE>PdfNumber</CODE>, represented as a <CODE>double</CODE> 
        </member>
        <member name="M:Dynamsoft.PDF.PdfNumber.#ctor(System.String)">
             Constructs a <CODE>PdfNumber</CODE>-object.
            
             @param        content            value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfNumber.#ctor(System.Int32)">
             Constructs a new int <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfNumber.#ctor(System.Double)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfNumber.#ctor(System.Single)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfNumber.Increment">
            Increments the value of the <CODE>PdfNumber</CODE>-object with 1.
        </member>
        <member name="P:Dynamsoft.PDF.PdfNumber.IntValue">
             Returns the primitive <CODE>int</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="P:Dynamsoft.PDF.PdfNumber.LongValue">
             Returns the primitive <CODE>long</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="P:Dynamsoft.PDF.PdfNumber.DoubleValue">
             Returns the primitive <CODE>double</CODE> value of this object.
            
             @return        a value
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfStream" -->
        <member name="F:Dynamsoft.PDF.PdfStream.DEFAULT_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfStream.NO_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfStream.BEST_SPEED">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfStream.BEST_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfStream.compressed">
            is the stream compressed? 
        </member>
        <member name="F:Dynamsoft.PDF.PdfStream.compressionLevel">
            The level of compression.
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfStream.#ctor(System.Byte[])">
             Constructs a <CODE>PdfStream</CODE>-object.
            
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:Dynamsoft.PDF.PdfStream.#ctor">
            Constructs a <CODE>PdfStream</CODE>-object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfStream.FlateCompress(System.Int32)">
            Compresses the stream.
            @param compressionLevel the compression level (0 = best speed, 9 = best compression, -1 is default)
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfStream.WriteContent(System.IO.Stream)">
            Writes the data content to an <CODE>Stream</CODE>.
            @param os the destination to write to
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfStream.ToString">
            @see com.lowagie.text.pdf.PdfObject#toString()
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.PdfStream.RawLength" -->
        <member name="M:Dynamsoft.PDF.PRIndirectReference.#ctor(Dynamsoft.PDF.PdfReader,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:Dynamsoft.PDF.PRIndirectReference.#ctor(Dynamsoft.PDF.PdfReader,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
        </member>
        <member name="P:Dynamsoft.PDF.PRStream.Length">
            Sets the data associated with the stream
            @param data raw data, decrypted and uncompressed.
        </member>
        <member name="T:Dynamsoft.PDF.PRTokeniser">
            
             @author  Paulo Soares
        </member>
        <member name="M:Dynamsoft.PDF.PRTokeniser.#ctor(Dynamsoft.PDF.RandomAccessFileOrArray)">
            Creates a PRTokeniser for the specified {@link RandomAccessSource}.
            The beginning of the file is read to determine the location of the header, and the data source is adjusted
            as necessary to account for any junk that occurs in the byte source before the header
            @param file the source
        </member>
        <member name="T:Dynamsoft.PDF.RandomAccessFileOrArray">
            Intended to be layered on top of a low level RandomAccessSource object.  Provides
            functionality useful during parsing:
            <ul>
            	<li>tracks current position in the file</li>
            	<li>allows single byte pushback</li>
            	<li>allows reading of multi-byte data structures (int, long, String) for both Big and Little Endian representations</li>
            	<li>allows creation of independent 'views' of the underlying data source</li>
            </ul> 
            
            @author Paulo Soares, Kevin Day
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessFileOrArray.byteSource">
            The source that backs this object
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessFileOrArray.byteSourcePosition">
            The physical location in the underlying byte source.
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessFileOrArray.back">
            the pushed  back byte, if any
        </member>
        <member name="F:Dynamsoft.PDF.RandomAccessFileOrArray.isBack">
            Whether there is a pushed back byte
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(System.String)">
            @deprecated use {@link RandomAccessFileOrArray#RandomAccessFileOrArray(RandomAccessSource)} instead
            @param filename
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(Dynamsoft.PDF.RandomAccessFileOrArray)">
            Creates an independent view of the specified source.  Closing the new object will not close the source.
            Closing the source will have adverse effect on the behavior of the new view.
            @deprecated use {@link RandomAccessFileOrArray#createView()} instead
            @param source the source for the new independent view
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.CreateView">
            Creates an independent view of this object (with it's own file pointer and pushback queue).  Closing the new object will not close this object.
            Closing this object will have adverse effect on the view.
            @return the new view
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(Dynamsoft.PDF.IRandomAccessSource)">
            Creates a RandomAccessFileOrArray that wraps the specified byte source.  The byte source will be closed when
            this RandomAccessFileOrArray is closed.
            @param byteSource the byte source to wrap
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(System.String,System.Boolean)">
            Constructs a new RandomAccessFileOrArrayObject
            @param filename the file to open (can be a file system file or one of the following url strings: file://, http://, https://, jar:, wsjar:, vfszip:
            @param forceRead if true, the entire file will be read into memory
            @param plainRandomAccess if true, a regular RandomAccessFile is used to access the file contents.  If false, a memory mapped file will be used, unless the file cannot be mapped into memory, in which case regular RandomAccessFile will be used
            @throws IOException if there is a failure opening or reading the file
            @deprecated use {@link RandomAccessSourceFactory#createBestSource(String)} and {@link RandomAccessFileOrArray#RandomAccessFileOrArray(RandomAccessSource)} instead
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(System.Uri)">
            @param url
            @throws IOException
            @deprecated use {@link RandomAccessSourceFactory#createSource(URL)} and {@link RandomAccessFileOrArray#RandomAccessFileOrArray(RandomAccessSource)} instead
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(System.IO.Stream)">
            @param is
            @throws IOException
            @deprecated use {@link RandomAccessSourceFactory#createSource(InputStream)} and {@link RandomAccessFileOrArray#RandomAccessFileOrArray(RandomAccessSource)} instead
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.#ctor(System.Byte[])">
            @param arrayIn
            @throws IOException
            @deprecated use {@link RandomAccessSourceFactory#createSource(byte[])} and {@link RandomAccessFileOrArray#RandomAccessFileOrArray(RandomAccessSource)} instead
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.PushBack(System.Byte)">
            Pushes a byte back.  The next get() will return this byte instead of the value from the underlying data source
            @param b the byte to push
        </member>
        <member name="M:Dynamsoft.PDF.RandomAccessFileOrArray.Read">
            Reads a single byte
            @return the byte, or -1 if EOF is reached
            @throws IOException
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.RandomAccessFileOrArray.ReadShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.RandomAccessFileOrArray.ReadCharLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.RandomAccessFileOrArray.ReadIntLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.RandomAccessFileOrArray.ReadUnsignedInt" -->
        <member name="T:Dynamsoft.PDF.DigestAlgorithms">
            Class that contains a map with the different message digest algorithms.
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.SHA1">
            Algorithm available for signatures since PDF 1.3 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.SHA256">
            Algorithm available for signatures since PDF 1.6 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.SHA384">
            Algorithm available for signatures since PDF 1.7 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.SHA512">
            Algorithm available for signatures since PDF 1.7 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.RIPEMD160">
            Algorithm available for signatures since PDF 1.7 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.digestNames">
            Maps the digest IDs with the human-readable name of the digest algorithm. 
        </member>
        <member name="F:Dynamsoft.PDF.DigestAlgorithms.allowedDigests">
            Maps the name of a digest algorithm with its ID. 
        </member>
        <member name="M:Dynamsoft.PDF.DigestAlgorithms.GetMessageDigest(System.String)">
            Creates a MessageDigest object that can be used to create a hash.
            @param hashAlgorithm the algorithm you want to use to create a hash
            @param provider  the provider you want to use to create the hash
            @return  a MessageDigest object
            @throws NoSuchAlgorithmException 
            @throws NoSuchProviderException 
            @throws GeneralSecurityException
        </member>
        <member name="M:Dynamsoft.PDF.DigestAlgorithms.Digest(System.IO.Stream,System.String)">
            Creates a hash using a specific digest algorithm and a provider. 
            @param data  the message of which you want to create a hash
            @param hashAlgorithm the algorithm used to create the hash
            @param provider  the provider used to create the hash
            @return  the hash
            @throws GeneralSecurityException
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.DigestAlgorithms.GetDigest(System.String)">
            Gets the digest name for a certain id
            @param oid   an id (for instance "1.2.840.113549.2.5")
            @return  a digest name (for instance "MD5")
        </member>
        <member name="M:Dynamsoft.PDF.DigestAlgorithms.GetAllowedDigests(System.String)">
            Returns the id of a digest algorithms that is allowed in PDF,
            or null if it isn't allowed. 
            @param name  the name of the digest algorithm
            @return  an oid
        </member>
        <member name="T:Dynamsoft.PDF.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="P:Dynamsoft.PDF.DigestUtilities.Algorithms">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.SecureRandom.#ctor(Dynamsoft.PDF.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="M:Dynamsoft.PDF.StandardDecryption.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            Creates a new instance of StandardDecryption 
        </member>
        <member name="T:Dynamsoft.PDF.Dimension">
            <summary>
            The <code>Dimension</code> class encapsulates the width and
            height of a component (in int precision) in a single object. 
            </summary>
            <remarks>
            The class is 
            associated with certain properties of components. Several methods 
            defined by the <code>Component</code> class and the 
            <code>LayoutManager</code> interface return a <code>Dimension</code> object.
            <p/>
            Normally the values of <code>width</code> 
            and <code>height</code> are non-negative ints. 
            The constructors that allow you to create a dimension do 
            not prevent you from setting a negative value for these properties. 
            If the value of <code>width</code> or <code>height</code> is 
            negative, the behavior of some methods defined by other objects is 
            undefined. 
            </remarks>
        </member>
        <member name="T:Dynamsoft.PDF.Dimension2D">
            <summary>
            The <code>Dimension2D</code> class is to encapsulate a width 
            and a height dimension.
            </summary>
            <remarks>
            This class is only the abstract baseclass for all objects that
            store a 2D dimension.
            The actual storage representation of the sizes is left to
            the subclass.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            Type-specific implementation subclasses are available for
            instantiation and provide a number of formats for storing
            the information necessary to satisfy the various accessor
            methods below.
            </summary>
            <seealso cref="T:System.Drawing.Dimension"/>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension2D.SetSize(System.Double,System.Double)">
            <summary>
            Sets the size of this <code>Dimension</code> object to the 
            specified width and height.
            </summary>
            <param name="width">the new width for the <code>Dimension</code>
            object</param>
            <param name="height">the new height for the <code>Dimension</code> 
            object</param>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension2D.Clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance</returns>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension2D.Width">
            <summary>
            Returns the width of this <code>Dimension</code> in double 
            precision.
            </summary>
               <value>the width</value>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension2D.Height">
            <summary>
            Returns the height of this <code>Dimension</code> in double 
            precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension2D.Size">
            <summary>
            Sets the size of this <code>Dimension2D</code> object to 
            match the specified size.
            </summary>
            <value>the size</value>
        </member>
        <member name="F:Dynamsoft.PDF.Dimension.width">
            <summary>
            The width dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Dimension.height">
            <summary>
            The height dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.#ctor">
            <summary>
            Creates an instance of <code>Dimension</code> with a width 
            of zero and a height of zero. 
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.#ctor(Dynamsoft.PDF.Dimension)">
            <summary>
            Creates an instance of <code>Dimension</code> whose width 
            and height are the same as for the specified dimension. 
            </summary>
            <param name="d">
            the specified dimension for the 
            <code>width</code> and 
            <code>height</code> values.
            </param>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Dimension and initializes it to the specified width and
            specified height.
            </summary>
            <param name="width">the specified width dimension</param>
            <param name="height">the specified height dimension</param>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.SetSize(System.Double,System.Double)">
            <summary>
            Set the size of this Dimension object to the specified width
            and height in double precision.
            </summary>
            <param name="width">the new width for the Dimension object</param>
            <param name="height">the new height for the Dimension object</param>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
            Set the size of this <code>Dimension</code> object 
            to the specified width and height.
            </summary>
            <param name="width">the new width for this <code>Dimension</code> object.</param>
            <param name="height">the new height for this <code>Dimension</code> object.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.Equals(System.Object)">
            <summary>
            Checks whether two dimension objects have equal values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.GetHashCode">
            <summary>
            Returns the hash code for this Dimension.
            </summary>
            <returns>a hash code</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Dimension.ToString">
            <summary>
            Returns a string representation of the values of this 
            <code>Dimension</code> object's <code>height</code> and 
            <code>width</code> fields.
            </summary>
            <remarks>
            This method is intended to be used only 
            for debugging purposes, and the content and format of the returned 
            string may vary between implementations. The returned string may be 
            empty but may not be <code>null</code>.
            </remarks>
            <returns>a string representation of this <code>Dimension</code>
            object.
            </returns>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension.Width">
            <summary>
            Returns the width of this dimension in double precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension.Height">
            <summary>
            Returns the height of this dimension in double precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:Dynamsoft.PDF.Dimension.Size">
            <summary>
            Get/set the size of this <code>Dimension</code> object.
            </summary>
            <value>the size</value>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTree.Add(System.IComparable,System.Object)">
            <summary>
             Add
             args: ByVal key As IComparable, ByVal data As Object
             key is object that implements IComparable interface
             performance tip: change to use use int type (such as the hashcode)
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTree.RestoreAfterInsert(Dynamsoft.PDF.OrderedTreeNode)">
            <summary>
             RestoreAfterInsert
             Additions to red-black trees usually destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTree.RotateLeft(Dynamsoft.PDF.OrderedTreeNode)">
            <summary>
             RotateLeft
             Rebalance the tree by rotating the nodes to the left
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTree.RotateRight(Dynamsoft.PDF.OrderedTreeNode)">
            <summary>
             RotateRight
             Rebalance the tree by rotating the nodes to the right
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetData(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetMinKey" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetMaxKey" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetMinValue" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetMaxValue" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.Elements" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.IsEmpty" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.Remove(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.Delete(Dynamsoft.PDF.OrderedTreeNode)" -->
        <member name="M:Dynamsoft.PDF.OrderedTree.RestoreAfterDelete(Dynamsoft.PDF.OrderedTreeNode)">
            <summary>
             RestoreAfterDelete
             Deletions from red-black trees may destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.RemoveMin" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.RemoveMax" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.OrderedTree.Clear" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.OrderedTree.Keys" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.OrderedTree.Values" -->
        <member name="M:Dynamsoft.PDF.OrderedTreeEnumerator.#ctor(Dynamsoft.PDF.OrderedTreeNode,System.Boolean,System.Boolean)">
            <summary>
             Determine order, walk the tree and push the nodes onto the stack
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTreeEnumerator.HasMoreElements">
            <summary>
             HasMoreElements
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTreeEnumerator.NextElement">
            <summary>
             NextElement
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.OrderedTreeEnumerator.MoveNext">
            <summary>
             MoveNext
             For .NET compatibility
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeEnumerator.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeEnumerator.Value">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeNode.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeNode.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeNode.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeNode.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.OrderedTreeNode.Right">
            <summary>
             Right
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.ListIterator">
            <summary>
            Summary description for ListIterator.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Properties">
            <summary>
            Summary description for Properties.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Document">
            <summary>
            A generic Document class.
            </summary>
            <remarks>
            All kinds of Text-elements can be added to a HTMLDocument.
            The Document signals all the listeners when an element
            has been added.<p/>
            <OL>
                <LI/>Once a document is created you can add some meta information.
                <LI/>You can also set the headers/footers.
                <LI/>You have to open the document before you can write content.
                <LI/>You can only write content (no more meta-formation!) once a document is opened.
                <LI/>When you change the header/footer on a certain page, this will be effective starting on the next page.
                <LI/>Ater closing the document, every listener (as well as its OutputStream) is closed too.
            </OL>
            </remarks>
            <example>
            <code>
            // creation of the document with a certain size and certain margins
            <strong>Document document = new Document(PageSize.A4, 50, 50, 50, 50);</strong>
            try {
                // creation of the different writers
                HtmlWriter.GetInstance(<strong>document</strong>, System.out);
                PdfWriter.GetInstance(<strong>document</strong>, new FileOutputStream("text.pdf"));
                // we add some meta information to the document
                <strong>document.AddAuthor("Bruno Lowagie");
                document.AddSubject("This is the result of a Test.");</strong>
                
                // we define a header and a footer
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                footer.SetAlignment(Element.ALIGN_CENTER);
                <strong>document.SetHeader(header);
                document.SetFooter(footer);</strong>
                // we open the document for writing
                <strong>document.Open();
                document.Add(new Paragraph("Hello world"));</strong>
            }
            catch (DocumentException de) {
                Console.Error.WriteLine(de.Message);
            }
            <strong>document.Close();</strong>
            </code>
            </example>
        </member>
        <member name="T:Dynamsoft.PDF.IDocListener">
            <summary>
            A class that implements DocListener will perform some
            actions when some actions are performed on a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.IElementListener"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
        </member>
        <member name="T:Dynamsoft.PDF.IElementListener">
            <summary>
            A class that implements ElementListener will perform some
            actions when an Element is added.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.IElementListener.Add(Dynamsoft.PDF.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <param name="element">Element added</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.Open">
            <summary>
            Signals that the Document has been opened and that
            Elements can be added.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
            <remarks>
            The output stream of every writer implementing IDocListener will be closed.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.SetPageSize(Dynamsoft.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.SetMarginMirroring(System.Boolean)">
            Parameter that allows you to do margin mirroring (odd/even pages)
            @param marginMirroring
            @return true if succesfull
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.SetMarginMirroringTopBottom(System.Boolean)">
            Parameter that allows you to do top/bottom margin mirroring (odd/even pages)
            @param marginMirroringTopBottom
            @return true if successful
            @since	2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.IDocListener.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.IDocListener.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="F:Dynamsoft.PDF.Document.ITEXT">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.Document.RELEASE">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.Document.ITEXT_VERSION">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie. 
        </member>
        <member name="F:Dynamsoft.PDF.Document.Compress">
            <summary> Allows the pdf documents to be produced without compression for debugging purposes. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.WmfFontCorrection">
            <summary> Scales the WMF font size. The default value is 0.86.  </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.listeners">
            <summary> The IDocListener. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.open">
            <summary> Is the document open or not? </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.close">
            <summary> Has the document allready been closed? </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.pageSize">
            <summary> The size of the page. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.marginLeft">
            <summary> margin in x direction starting from the left </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.marginRight">
            <summary> margin in x direction starting from the right </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.marginTop">
            <summary> margin in y direction starting from the top </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.marginBottom">
            <summary> margin in y direction starting from the bottom </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.marginMirroringTopBottom">
            mirroring of the top/bottom margins
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.Document.javaScript_onLoad">
            <summary> Content of JavaScript onLoad function </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.javaScript_onUnLoad">
            <summary> Content of JavaScript onUnLoad function  </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.htmlStyleClass">
            <summary> Style class in HTML body tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.pageN">
            <summary> Current pagenumber </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Document.chapternumber">
            This is a chapter number in case ChapterAutoNumber is used. 
        </member>
        <member name="M:Dynamsoft.PDF.Document.#ctor">
            <summary>
            Constructs a new Document-object.
            </summary>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="M:Dynamsoft.PDF.Document.#ctor(Dynamsoft.PDF.Rectangle)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
        </member>
        <member name="M:Dynamsoft.PDF.Document.#ctor(Dynamsoft.PDF.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddDocListener(Dynamsoft.PDF.IDocListener)">
            <summary>
            Adds a IDocListener to the Document.
            </summary>
            <param name="listener">the new IDocListener</param>
        </member>
        <member name="M:Dynamsoft.PDF.Document.RemoveIDocListener(Dynamsoft.PDF.IDocListener)">
            <summary>
            Removes a IDocListener from the Document.
            </summary>
            <param name="listener">the IDocListener that has to be removed.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Document.Add(Dynamsoft.PDF.IElement)">
            <summary>
            Adds an Element to the Document.
            </summary>
            <param name="element">the Element to add</param>
            <returns>true if the element was added, false if not</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.Open">
            <summary>
            Opens the document.
            </summary>
            <remarks>
            Once the document is opened, you can't write any Header- or Meta-information
            anymore. You have to open the document before you can begin to add content
            to the body of the document.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.Document.SetPageSize(Dynamsoft.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Document.Close">
            <summary>
            Closes the document.
            </summary>
            <remarks>
            Once all the content has been written in the body, you have to close
            the body. After that nothing can be written to the body anymore.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddTitle(System.String)">
            <summary>
            Adds the title to a Document.
            </summary>
            <param name="title">the title</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddSubject(System.String)">
            <summary>
            Adds the subject to a Document.
            </summary>
            <param name="subject">the subject</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddKeywords(System.String)">
            <summary>
            Adds the keywords to a Document.
            </summary>
            <param name="keywords">keywords to add</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddAuthor(System.String)">
            <summary>
            Adds the author to a Document.
            </summary>
            <param name="author">the name of the author</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddCreator(System.String)">
            <summary>
            Adds the creator to a Document.
            </summary>
            <param name="creator">the name of the creator</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddProducer">
            <summary>
            Adds the producer to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.AddCreationDate(System.String)">
            <summary>
            Adds the current date and time to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Document.IsOpen">
            <summary>
            Checks if the document is open.
            </summary>
            <returns>true if the document is open</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.Document.SetMarginMirroring(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.Document.SetMarginMirroringTopBottom(System.Boolean)" -->
        <member name="M:Dynamsoft.PDF.Document.IsMarginMirroring">
            Gets the margin mirroring flag.
            
            @return the margin mirroring flag
        </member>
        <member name="F:Dynamsoft.PDF.Document.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="P:Dynamsoft.PDF.Document.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.PageNumber">
            <summary>
            Returns the current page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.LeftMargin">
            <summary>
            Returns the left margin.
            </summary>
            <value>the left margin</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.RightMargin">
            <summary>
            Return the right margin.
            </summary>
            <value>the right margin</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.TopMargin">
            <summary>
            Returns the top margin.
            </summary>
            <value>the top margin</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.BottomMargin">
            <summary>
            Returns the bottom margin.
            </summary>
            <value>the bottom margin</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.Left">
            <summary>
            Returns the lower left x-coordinate.
            </summary>
            <value>the lower left x-coordinate</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.Right">
            <summary>
            Returns the upper right x-coordinate.
            </summary>
            <value>the upper right x-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.Top">
            <summary>
            Returns the upper right y-coordinate.
            </summary>
            <value>the upper right y-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.Bottom">
            <summary>
            Returns the lower left y-coordinate.
            </summary>
            <value>the lower left y-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.PageSize">
            <summary>
            Gets the pagesize.
            </summary>
            <value>the page size</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.Product">
            Gets the product name.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.PDF.Document.Release">
            Gets the release number.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.PDF.Document.Version">
            <summary>
            Gets the iText version.
            </summary>
            <value>iText version</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.JavaScript_onLoad">
            <summary>
            Gets the JavaScript onLoad command.
            </summary>
            <value>the JavaScript onLoad command.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.JavaScript_onUnLoad">
            <summary>
            Gets the JavaScript onUnLoad command.
            </summary>
            <value>the JavaScript onUnLoad command</value>
        </member>
        <member name="P:Dynamsoft.PDF.Document.HtmlStyleClass">
            <summary>
            Gets the style class of the HTML body tag
            </summary>
            <value>the style class of the HTML body tag</value>
        </member>
        <member name="T:Dynamsoft.PDF.DocWriter">
            <summary>
            An abstract Writer class for documents.
            </summary>
            <remarks>
            DocWriter is the abstract class of several writers such
            as PdfWriter and HtmlWriter.
            A DocWriter can be added as a DocListener
            to a certain Document by getting an instance (see method
            GetInstance() in the specific writer-classes).
            Every Element added to the original Document
            will be written to the stream of the listening
            DocWriter.
            </remarks>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.NEWLINE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.TAB">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.LT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.SPACE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.EQUALS">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.QUOTE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.GT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.FORWARD">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.pageSize">
            <summary> The pageSize. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.document">
            <summary> This is the document that has to be written. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.os">
            <summary> The stream of this writer. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.open">
            <summary> Is the writer open for writing? </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.pause">
            <summary> Do we have to pause all writing actions? </summary>
        </member>
        <member name="F:Dynamsoft.PDF.DocWriter.closeStream">
            Closes the stream on document close 
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.#ctor(Dynamsoft.PDF.Document,System.IO.Stream)">
            <summary>
            Constructs a DocWriter.
            </summary>
            <param name="document">The Document that has to be written</param>
            <param name="os">The Stream the writer has to write to.</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Add(Dynamsoft.PDF.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class.
            </remarks>
            <param name="element"></param>
            <returns>false</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Open">
            <summary>
            Signals that the Document was opened.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.SetPageSize(Dynamsoft.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.GetISOBytes(System.String)">
            <summary>
            Converts a string into a Byte array
            according to the ISO-8859-1 codepage.
            </summary>
            <param name="text">the text to be converted</param>
            <returns>the conversion result</returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Pause">
            <summary>
            Let the writer know that all writing has to be paused.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.IsPaused">
             Checks if writing is paused.
            
             @return       <CODE>true</CODE> if writing temporarely has to be paused, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Resume">
            <summary>
            Let the writer know that writing may be resumed.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Flush">
            <summary>
            Flushes the Stream.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="str">the string to write</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.AddTabs(System.Int32)">
            <summary>
            Writes a number of tabs.
            </summary>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.Write(System.String,System.String)">
            <summary>
            Writes a key-value pair to the stream.
            </summary>
            <param name="key">the name of an attribute</param>
            <param name="value">the value of an attribute</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.WriteStart(System.String)">
            <summary>
            Writes a starttag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.WriteEnd(System.String)">
            <summary>
            Writes an endtag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.WriteEnd">
            <summary>
            Writes an endtag to the stream.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.WriteMarkupAttributes(Dynamsoft.PDF.Properties)">
            <summary>
            Writes the markup attributes of the specified MarkupAttributes
            object to the stream.
            </summary>
            <param name="mAtt">the MarkupAttributes to write.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.DocWriter.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.PDF.DocWriter.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="T:Dynamsoft.PDF.Element">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:Dynamsoft.PDF.Element.HEADER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.TITLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.SUBJECT">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.KEYWORDS">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.AUTHOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.PRODUCER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CREATIONDATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CREATOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CHUNK">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.PHRASE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.PARAGRAPH">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.SECTION">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.LIST">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.LISTITEM">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CHAPTER">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ANCHOR">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CELL">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ROW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.TABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.PTABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ANNOTATION">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.RECTANGLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.JPEG">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.JPEG2000">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:Dynamsoft.PDF.Element.IMGRAW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.IMGTEMPLATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.JBIG2">
            This is a possible type of <CODE>Element</CODE>.
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.Element.MULTI_COLUMN_TEXT">
            <summary> This is a possible type of <CODE>Element</CODE>. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.MARKED">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:Dynamsoft.PDF.Element.YMARK">
            This is a possible type of <CODE>Element</CODE>.
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_UNDEFINED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_LEFT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_CENTER">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the center
            and extra whitespace should be placed equally on
            the left and right.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_RIGHT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the right
            indent and extra whitespace should be placed on
            the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_JUSTIFIED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that extra whitespace should be spread
            out through the rows of the paragraph with the
            text lined up with the left and right indent
            except on the last line which should be aligned
            to the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_TOP">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_MIDDLE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_BOTTOM">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_BASELINE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.ALIGN_JUSTIFIED_ALL">
            <summary>
            Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITTG4">
            <summary>
            Pure two-dimensional encoding (Group 4)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITTG3_1D">
            <summary>
            Pure one-dimensional encoding (Group 3, 1-D)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITTG3_2D">
            <summary>
            Mixed one- and two-dimensional encoding (Group 3, 2-D)
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITT_BLACKIS1">
            <summary>
            A flag indicating whether 1-bits are to be interpreted as black pixels
            and 0-bits as white pixels,
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITT_ENCODEDBYTEALIGN">
            <summary>
            A flag indicating whether the filter expects extra 0-bits before each
            encoded line so that the line begins on a byte boundary.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITT_ENDOFLINE">
            <summary>
            A flag indicating whether end-of-line bit patterns are required to be
             present in the encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Element.CCITT_ENDOFBLOCK">
            <summary>
            A flag indicating whether the filter expects the encoded data to be
            terminated by an end-of-block pattern, overriding the Rows
            parameter. The use of this flag will set the key /EndOfBlock to false.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.ElementTags">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ITEXT">
            <summary> the root tag. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.TITLE">
            <summary> attribute of the root and annotation tag (also a special tag within a chapter or section) </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SUBJECT">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.KEYWORDS">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.AUTHOR">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CREATIONDATE">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PRODUCER">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CHAPTER">
            <summary> the chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SECTION">
            <summary> the section tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NUMBERDEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.DEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NUMBER">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.INDENT">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LEFT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.RIGHT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PHRASE">
            <summary> the phrase tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ANCHOR">
            <summary> the anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LIST">
            <summary> the list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LISTITEM">
            <summary> the listitem tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PARAGRAPH">
            <summary> the paragraph tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LEADING">
            <summary> attribute of phrase/paragraph/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN">
            <summary> attribute of paragraph/image/table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.KEEPTOGETHER">
            <summary> attribute of paragraph </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NAME">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.REFERENCE">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LISTSYMBOL">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NUMBERED">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LETTERED">
            <summary> attribute of the list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.FIRST">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SYMBOLINDENT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.INDENTATIONLEFT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.INDENTATIONRIGHT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.IGNORE">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ENTITY">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ID">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CHUNK">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ENCODING">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.EMBEDDED">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.COLOR">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.RED">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.GREEN">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BLUE">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.TABLE">
            <summary> the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ROW">
            <summary> the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CELL">
            <summary> the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.COLUMNS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LASTHEADERROW">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CELLPADDING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CELLSPACING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.OFFSET">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.WIDTHS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.TABLEFITSPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CELLSFITPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CONVERT2PDFP">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.HORIZONTALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.VERTICALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.COLSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ROWSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.HEADER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.FOOTER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NOWRAP">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BORDERWIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.TOP">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BOTTOM">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.WIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BORDERCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BACKGROUNDCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BGRED">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BGGREEN">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BGBLUE">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.GRAYFILL">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.IMAGE">
            <summary> the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.BOOKMARKOPEN">
            <summary> the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.URL">
            <summary> attribute of the image and annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.UNDERLYING">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.TEXTWRAP">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ABSOLUTEX">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ABSOLUTEY">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PLAINWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PLAINHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SCALEDWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SCALEDHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ROTATION">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NEWPAGE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NEWLINE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ANNOTATION">
            <summary> the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.FILE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.DESTINATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PAGE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.NAMED">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.APPLICATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PARAMETERS">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.OPERATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.DEFAULTDIR">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LLX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LLY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.URX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.URY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.CONTENT">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_LEFT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_CENTER">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_RIGHT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_JUSTIFIED">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_JUSTIFIED_ALL">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_TOP">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_MIDDLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_BOTTOM">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_BASELINE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.DEFAULT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.UNKNOWN">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.FONT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SIZE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.STYLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.HORIZONTALRULE">
            <summary> the possible value of a tag </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.PAGE_SIZE">
            the possible value of a tag 
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ORIENTATION">
            the possible value of a tag 
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.ALIGN_INDENTATION_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.AUTO_INDENT_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.LOWERCASE">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.FACE">
            a possible list attribute
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.ElementTags.SRC">
            attribute of the image or iframe tag
            @since 2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.ElementTags.GetAlignment(System.Int32)">
            <summary>
            Translates the alignment value to a String value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="M:Dynamsoft.PDF.ElementTags.AlignmentValue(System.String)">
            Translates a String value to an alignment value.
            (written by Norman Richards, integrated into iText by Bruno)
            @param	a String (one of the ALIGN_ constants of this class)
            @param	an alignment value (one of the ALIGN_ constants of the Element interface) 
        </member>
        <member name="T:Dynamsoft.PDF.ICC_Profile">
            <summary>
            Summary description for ICC_Profile.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.IElement">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="M:Dynamsoft.PDF.IElement.Process(Dynamsoft.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.PDF.IElement.IsContent">
            Checks if this element is a content object.
            If not, it's a metadata object.
            @since    iText 2.0.8
            @return   true if this is a 'content' element; false if this is a 'medadata' element
        </member>
        <member name="M:Dynamsoft.PDF.IElement.IsNestable">
            Checks if this element is nestable.
            @since    iText 2.0.8
            @return   true if this element can be nested inside other elements.
        </member>
        <member name="M:Dynamsoft.PDF.IElement.ToString">
            <summary>
            Gets the content of the text element.
            </summary>
            <returns>the content of the text element</returns>
        </member>
        <member name="P:Dynamsoft.PDF.IElement.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.PDF.IElement.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="T:Dynamsoft.PDF.Images.Image">
            <summary>
            An Image is the representation of a graphic element (JPEG, PNG or GIF)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
        </member>
        <member name="T:Dynamsoft.PDF.Rectangle">
            <summary>
            A Rectangle is the representation of a geometric figure.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.UNDEFINED">
            <summary> This is the value that will be used as <VAR>undefined</VAR>. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.TOP_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.BOTTOM_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.LEFT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.RIGHT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.NO_BORDER">
            <summary> This represents a rectangle without borders. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.BOX">
            <summary> This represents a type of border. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.llx">
            <summary> the lower left x-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.lly">
            <summary> the lower left y-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.urx">
            <summary> the upper right x-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.ury">
            <summary> the upper right y-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.border">
            <summary> This represents the status of the 4 sides of the rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderWidth">
            <summary> This is the width of the border around this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderColor">
            <summary> This is the color of the border of this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderColorLeft">
            The color of the left border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderColorRight">
            The color of the right border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderColorTop">
            The color of the top border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderColorBottom">
            The color of the bottom border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderWidthLeft">
            The width of the left border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderWidthRight">
            The width of the right border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderWidthTop">
            The width of the top border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.borderWidthBottom">
            The width of the bottom border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.useVariableBorders">
            Whether variable width borders are used. 
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.backgroundColor">
            <summary> This is the color of the background of this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Rectangle.rotation">
            <summary> This is the rotation value of this rectangle. </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.#ctor(Dynamsoft.PDF.Rectangle)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.CloneNonPositionParameters(Dynamsoft.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.SoftCloneNonPositionParameters(Dynamsoft.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.Process(Dynamsoft.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.GetRectangle(System.Single,System.Single)">
            <summary>
            Gets a Rectangle that is altered to fit on the page.
            </summary>
            <param name="top">the top position</param>
            <param name="bottom">the bottom position</param>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.Rotate">
            <summary>
            Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.HasBorders">
            <summary>
            Indicates if the table has borders.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.HasBorder(System.Int32)">
            <summary>
            Indicates if the table has a some type of border.
            </summary>
            <param name="type">the type of border</param>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Rectangle.UpdateBorderBasedOnWidth(System.Single,System.Int32)">
            Updates the border flag for a side based on the specified width. A width
            of 0 will disable the border on that side. Any other width enables it.
            
            @param width
                       width of border
            @param side
                       border side constant
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Width">
            <summary>
            Returns the width of the rectangle.
            </summary>
            <value>a width</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Height">
            <summary>
            Returns the height of the rectangle.
            </summary>
            <value>a height</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.Rotation">
            <summary>
            Returns the rotation
            </summary>
            <value>a int</value>    
        </member>
        <member name="P:Dynamsoft.PDF.Rectangle.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.DEFAULT">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.AX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_NONE">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_JPEG">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_PNG">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_GIF">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_BMP">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_TIFF">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_WMF">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_JPEG2000">
            type of image 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.ORIGINAL_JBIG2">
            type of image
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.invert">
            Image color inversion 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.type">
            <summary> The imagetype. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.url">
            <summary> The URL of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.rawData">
            <summary> The raw data of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.rotationRadians">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.indentationLeft">
            the indentation to the left. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.indentationRight">
            the indentation to the right. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.deflated">
            Holds value of property deflated. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.smask">
            Holds value of property smask. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.xyRatio">
            Holds value of property XYRatio. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.originalType">
            Holds value of property originalType. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.originalData">
            Holds value of property originalData. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.spacingBefore">
            The spacing before the image. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.spacingAfter">
            The spacing after the image. 
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.widthPercentage">
            Holds value of property widthPercentage.
        </member>
        <member name="F:Dynamsoft.PDF.Images.Image.initialRotation">
            Holds value of property initialRotation.
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.#ctor(System.Uri)">
            <summary>
            Constructs an Image-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.#ctor(Dynamsoft.PDF.Images.Image)">
            <summary>
            Constructs an Image object duplicate.
            </summary>
            <param name="image">another Image object.</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(Dynamsoft.PDF.Images.Image)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="image">an Image</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Byte[])">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="img">a byte array</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a .NET image to a Native(PNG, JPG, GIF, WMF) image
            </summary>
            <param name="image"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Color,System.Boolean)">
            <summary>
            Gets an instance of an Image from a System.Drwaing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <param name="forceBW">if true the image is treated as black and white</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <param name="transparency">
            transparency information in the Mask format of the
            image dictionary
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Gets an instance of an Image from a System.Drawing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
            Sets the absolute position of the Image.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScaleAbsolute(System.Single,System.Single)">
            <summary>
            Scale the image to an absolute width and an absolute height.
            </summary>
            <param name="newWidth">the new width</param>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScaleAbsoluteWidth(System.Single)">
            <summary>
            Scale the image to an absolute width.
            </summary>
            <param name="newWidth">the new width</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScaleAbsoluteHeight(System.Single)">
            <summary>
            Scale the image to an absolute height.
            </summary>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScalePercent(System.Single)">
            <summary>
            Scale the image to a certain percentage.
            </summary>
            <param name="percent">the scaling percentage</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScalePercent(System.Single,System.Single)">
            <summary>
            Scale the width and height of an image to a certain percentage.
            </summary>
            <param name="percentX">the scaling percentage of the width</param>
            <param name="percentY">the scaling percentage of the height</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.ScaleToFit(System.Single,System.Single)">
            <summary>
            Scales the image so that it fits a certain width and height.
            </summary>
            <param name="fitWidth">the width to fit</param>
            <param name="fitHeight">the height to fit</param>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetImageRotation">
            Gets the current image rotation in radians.
            @return the current image rotation in radians
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.HasAbsolutePosition">
            <summary>
            Checks if the Images has to be added at an absolute position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.HasAbsoluteX">
            <summary>
            Checks if the Images has to be added at an absolute X position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsJpeg">
            <summary>
            Returns true if the image is a Jpeg-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsImgRaw">
            <summary>
            Returns true if the image is a ImgRaw-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsImgTemplate">
            <summary>
            Returns true if the image is an ImgTemplate-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.GetSerialId">
            <summary>
            generates new serial id
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.SetDpi(System.Int32,System.Int32)">
            Sets the dots per inch value
            
            @param dpiX
                       dpi for x coordinates
            @param dpiY
                       dpi for y coordinates
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsMaskCandidate">
            <summary>
            Returns true if this Image has the
            requisites to be a mask.
            </summary>
            <returns>true if this Image can be a mask</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.MakeMask">
            <summary>
            Make this Image a mask.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.IsMask">
            <summary>
            Returns true if this Image is a mask.
            </summary>
            <returns>true if this Image is a mask</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.SimplifyColorspace">
            Replaces CalRGB and CalGray colorspaces with DeviceRGB and DeviceGray.
        </member>
        <member name="M:Dynamsoft.PDF.Images.Image.HasICCProfile">
            Checks is the image has an ICC profile.
            @return the ICC profile or null
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Rotation">
            <summary>
            Sets the rotation of the image in radians.
            </summary>
            <param name="r">rotation in radians</param>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.RotationDegrees">
            <summary>
            Sets the rotation of the image in degrees.
            </summary>
            <param name="deg">rotation in degrees</param>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Bpc">
            <summary>
            Gets the bpc for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>a bpc value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.RawData">
            <summary>
            Gets the raw data for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>the raw data</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.AbsoluteX">
            <summary>
            Returns the absolute X position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.AbsoluteY">
            <summary>
            Returns the absolute Y position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Type">
            <summary>
            Returns the type.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Url">
            <summary>
            Gets the string-representation of the reference to the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Alignment">
            <summary>
            Get/set the alignment for the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Alt">
            <summary>
            Get/set the alternative text for the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.ScaledWidth">
            <summary>
            Gets the scaled width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.ScaledHeight">
            <summary>
            Gets the scaled height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Colorspace">
            <summary>
            Gets the colorspace for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type Jpeg.
            </remarks>
            <value>a colorspace value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Matrix">
            <summary>
            Returns the transformation matrix of the image.
            </summary>
            <value>an array [AX, AY, BX, BY, CX, CY, DX, DY]</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Transparency">
            <summary>
            Returns the transparency.
            </summary>
            <value>the transparency</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.PlainWidth">
            <summary>
            Gets the plain width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.PlainHeight">
            <summary>
            Gets the plain height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.MySerialId">
            <summary>
            returns serial id for this object
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.DpiX">
            <summary>
            Gets the dots-per-inch in the X direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the X direction</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.DpiY">
            <summary>
            Gets the dots-per-inch in the Y direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the Y direction</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.ImageMask">
            <summary>
            Get/set the explicit masking.
            </summary>
            <value>the explicit masking</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Inverted">
            <summary>
            Inverts the meaning of the bits of a mask.
            </summary>
            <value>true to invert the meaning of the bits of a mask</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.Interpolation">
            <summary>
            Sets the image interpolation. Image interpolation attempts to
            produce a smooth transition between adjacent sample values.
            </summary>
            <value>New value of property interpolation.</value>
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.InitialRotation">
            Some image formats, like TIFF may present the images rotated that have
            to be compensated.
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.CompressionLevel">
            Sets the compression level to be used if the image is written as a compressed stream.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <member name="P:Dynamsoft.PDF.Images.Image.TagICC">
            Tags this image with an ICC profile.
            @param profile the profile
        </member>
        <member name="T:Dynamsoft.PDF.ImgCCITT">
             CCITT Image data that has to be inserted into the document
            
             @see        Element
             @see        Image
            
             @author  Paulo Soares
            <summary>
            CCITT Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:Dynamsoft.PDF.ImgCCITT.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in CCITT mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="reverseBits">
            reverses the bits in data.
            Bit 0 is swapped with bit 7 and so on
            </param>
            <param name="typeCCITT">
            the type of compression in data. It can be
            CCITTG4, CCITTG31D, CCITTG32D
            </param>
            <param name="parameters">
            parameters associated with this stream. Possible values are
            CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
            combination of them
            </param>
            <param name="data">the image data</param>
        </member>
        <member name="T:Dynamsoft.PDF.ImgRaw">
            <summary>
            Raw Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:Dynamsoft.PDF.ImgRaw.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in raw mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component. Must be 1,2,4 or 8</param>
            <param name="data">data the image data</param>
        </member>
        <member name="T:Dynamsoft.PDF.IPdfVersion">
            The PDF version is described in the PDF Reference 1.7 p92
            (about the PDF Header) and page 139 (the version entry in
            the Catalog). You'll also find info about setting the version
            in the book 'iText in Action' sections 2.1.3 (PDF Header)
            and 3.3 (Version history).
        </member>
        <member name="M:Dynamsoft.PDF.IPdfVersion.SetAtLeastPdfVersion(System.Char)">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header,
            but only if param refers to a higher version.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="M:Dynamsoft.PDF.IPdfVersion.SetPdfVersion(Dynamsoft.PDF.PdfName)">
            Sets the PDF version as it will appear in the Catalog.
            Note that this only has effect if you use a later version
            than the one that appears in the header; this method
            ignores the parameter if you try to set a lower version.
            @param version   the PDF name that will be used for the Version key in the catalog
        </member>
        <member name="P:Dynamsoft.PDF.IPdfVersion.PdfVersion">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="T:Dynamsoft.PDF.Jpeg">
            <summary>
            An Jpeg is the representation of a graphic element (JPEG)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Png"/>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.NOT_A_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.VALID_MARKERS">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.UNSUPPORTED_MARKERS">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Jpeg.NOPARAM_MARKERS">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.#ctor(Dynamsoft.PDF.Images.Image)">
            <summary>
            Construct a Jpeg-object, using a Image
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.#ctor(System.Uri)">
            <summary>
            Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="Uri">the Uri where the image can be found</param>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.#ctor(System.Byte[])">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image.</param>
            <param name="width">the width you want the image to have</param>
            <param name="height">the height you want the image to have</param>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.GetShort(System.IO.Stream)">
            <summary>
            Reads a short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.GetShortInverted(System.IO.Stream)">
            <summary>
            Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.MarkerType(System.Int32)">
            <summary>
            Returns a type of marker.
            </summary>
            <param name="marker">an int</param>
            <returns>a type: VALID_MARKER, UNSUPPORTED_MARKER or NOPARAM_MARKER</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Jpeg.ProcessParameters">
            <summary>
            This method checks if the image is a valid JPEG and processes some parameters.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Meta">
            <summary>
            This is an Element that contains
            some meta information about the document.
            </summary>
            <remarks>
            An object of type Meta can not be constructed by the user.
            Userdefined meta information should be placed in a Header-object.
            Meta is reserved for: Subject, Keywords, Author, Title, Producer
            and Creationdate information.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Header"/>
        </member>
        <member name="F:Dynamsoft.PDF.Meta.type">
            <summary> This is the type of Meta-information this object contains. </summary>
        </member>
        <member name="F:Dynamsoft.PDF.Meta.content">
            <summary> This is the content of the Meta-information. </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Meta.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="type">the type of meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:Dynamsoft.PDF.Meta.#ctor(System.String,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="tag">the tagname of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:Dynamsoft.PDF.Meta.Process(Dynamsoft.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Meta.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.PDF.Meta.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.PDF.Meta.Append(System.String)">
            <summary>
            appends some text to this Meta.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Meta.GetType(System.String)">
            <summary>
            Returns the name of the meta information.
            </summary>
            <param name="tag">name to match</param>
            <returns>a string</returns>
        </member>
        <member name="P:Dynamsoft.PDF.Meta.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.PDF.Meta.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:Dynamsoft.PDF.Meta.Content">
            <summary>
            Returns the content of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.PDF.Meta.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:Dynamsoft.PDF.PageSize">
            <summary>
            The PageSize-object contains a number of read only rectangles representing the most common paper sizes.
            </summary>
            <seealso cref="T:iTextSharp.text.RectangleReadOnly"/>
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.LETTER">
            This is the letter format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.NOTE">
            This is the note format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.LEGAL">
            This is the legal format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.TABLOID">
            This is the tabloid format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.EXECUTIVE">
            This is the executive format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.POSTCARD">
            This is the postcard format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A0">
            This is the a0 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A1">
            This is the a1 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A2">
            This is the a2 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A3">
            This is the a3 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A4">
            This is the a4 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A5">
            This is the a5 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A6">
            This is the a6 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A7">
            This is the a7 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A8">
            This is the a8 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A9">
            This is the a9 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.A10">
            This is the a10 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B0">
            This is the b0 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B1">
            This is the b1 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B2">
            This is the b2 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B3">
            This is the b3 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B4">
            This is the b4 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B5">
            This is the b5 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B6">
            This is the b6 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B7">
            This is the b7 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B8">
            This is the b8 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B9">
            This is the b9 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.B10">
            This is the b10 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ARCH_E">
            This is the archE format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ARCH_D">
            This is the archD format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ARCH_C">
            This is the archC format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ARCH_B">
            This is the archB format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ARCH_A">
            This is the archA format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.FLSA">
            This is the American Foolscap format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.FLSE">
            This is the European Foolscap format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.HALFLETTER">
            This is the halfletter format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize._11X17">
            This is the 11x17 format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ID_1">
            This is the ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch) 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ID_2">
            This is the ISO 7810 ID-2 format (A7 rotated) 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ID_3">
            This is the ISO 7810 ID-3 format (B7 rotated) 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.LEDGER">
            This is the ledger format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.CROWN_QUARTO">
            This is the Crown Quarto format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.LARGE_CROWN_QUARTO">
            This is the Large Crown Quarto format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.DEMY_QUARTO">
            This is the Demy Quarto format. 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ROYAL_QUARTO">
            This is the Royal Quarto format. 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.CROWN_OCTAVO">
            This is the Crown Octavo format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.LARGE_CROWN_OCTAVO">
            This is the Large Crown Octavo format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.DEMY_OCTAVO">
            This is the Demy Octavo format 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.ROYAL_OCTAVO">
            This is the Royal Octavo format. 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.SMALL_PAPERBACK">
            This is the small paperback format. 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.PENGUIN_SMALL_PAPERBACK">
            This is the Pengiun small paperback format. 
        </member>
        <member name="F:Dynamsoft.PDF.PageSize.PENGUIN_LARGE_PAPERBACK">
            This is the Penguin large paparback format. 
        </member>
        <member name="M:Dynamsoft.PDF.PageSize.GetRectangle(System.String)">
            This method returns a Rectangle based on a String.
            Possible values are the the names of a constant in this class
            (for instance "A4", "LETTER",...) or a value like "595 842"
        </member>
        <member name="T:Dynamsoft.PDF.PdfContentByte">
            <CODE>PdfContentByte</CODE> is an object containing the user positioned
            text and graphic contents of a page. It knows how to apply the proper
            font encoding.
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.ALIGN_CENTER">
            The alignement is center 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.ALIGN_LEFT">
            The alignement is left 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.ALIGN_RIGHT">
            The alignement is right 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_CAP_BUTT">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_CAP_ROUND">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_CAP_PROJECTING_SQUARE">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_JOIN_MITER">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_JOIN_ROUND">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.LINE_JOIN_BEVEL">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_INVISIBLE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.TEXT_RENDER_MODE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.content">
            This is the actual content 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.writer">
            This is the writer 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.pdf">
            This is the PdfDocument 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.layerDepth">
            The list were we save/restore the layer depth 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.stateList">
            The list were we save/restore the state 
        </member>
        <member name="F:Dynamsoft.PDF.PdfContentByte.separator">
            The separator between commands.
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.#ctor(Dynamsoft.PDF.PdfWriter)">
             Constructs a new <CODE>PdfContentByte</CODE>-object.
            
             @param wr the writer associated to this content
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.ToString">
             Returns the <CODE>string</CODE> representation of this <CODE>PdfContentByte</CODE>-object.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.ToPdf(Dynamsoft.PDF.PdfWriter)">
            Returns the PDF representation of this <CODE>PdfContentByte</CODE>-object.
            
             @param writer the <CODE>PdfWriter</CODE>
             @return a <CODE>byte</CODE> array with the representation
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.Add(Dynamsoft.PDF.PdfContentByte)">
             Adds the content of another <CODE>PdfContent</CODE>-object to this object.
            
             @param       other       another <CODE>PdfByteContent</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.AddImage(Dynamsoft.PDF.Images.Image)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning.
            @param image the <CODE>Image</CODE> object
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.AddImage(Dynamsoft.PDF.Images.Image,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning. The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.AddImage(Dynamsoft.PDF.Images.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y).
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.AddImage(Dynamsoft.PDF.Images.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.Reset">
            Makes this <CODE>PdfContentByte</CODE> empty.
            Calls <code>reset( true )</code>
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.Reset(System.Boolean)">
            Makes this <CODE>PdfContentByte</CODE> empty.
            @param validateContent will call <code>sanityCheck()</code> if true.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.EscapeString(System.Byte[])">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
             @return an escaped <CODE>byte</CODE> array
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.EscapeString(System.Byte[],Dynamsoft.PDF.ByteBuffer)">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
        </member>
        <member name="M:Dynamsoft.PDF.PdfContentByte.CheckWriter">
            Check if we have a valid PdfWriter.
            
        </member>
        <member name="P:Dynamsoft.PDF.PdfContentByte.InternalBuffer">
            Gets the internal buffer.
            @return the internal buffer
        </member>
        <member name="P:Dynamsoft.PDF.PdfContentByte.Size">
             Gets the size of this content.
            
             @return the size of the content
        </member>
        <member name="P:Dynamsoft.PDF.PdfContentByte.PdfWriter">
            Gets the <CODE>PdfWriter</CODE> in use by this object.
            @return the <CODE>PdfWriter</CODE> in use by this object
        </member>
        <member name="P:Dynamsoft.PDF.PdfContentByte.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> in use by this object.
            @return the <CODE>PdfDocument</CODE> in use by this object
        </member>
        <member name="P:Dynamsoft.PDF.PdfContentByte.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:Dynamsoft.PDF.PdfContents">
            <CODE>PdfContents</CODE> is a <CODE>PdfStream</CODE> containing the contents (text + graphics) of a <CODE>PdfPage</CODE>.
        </member>
        <member name="M:Dynamsoft.PDF.PdfContents.#ctor(Dynamsoft.PDF.PdfContentByte,Dynamsoft.PDF.PdfContentByte,Dynamsoft.PDF.PdfContentByte,Dynamsoft.PDF.PdfContentByte,Dynamsoft.PDF.Rectangle)">
             Constructs a <CODE>PdfContents</CODE>-object, containing text and general graphics.
            
             @param under the direct content that is under all others
             @param content the graphics in a page
             @param text the text in a page
             @param secondContent the direct content that is over all others
             @throws BadPdfFormatException on error
        </member>
        <member name="T:Dynamsoft.PDF.PdfDestination">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.XYZ">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FIT">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITH">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITV">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITR">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITB">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITBH">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.FITBV">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDestination.status">
            Is the indirect reference to a page already added? 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDestination.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDestination.#ctor(System.Int32,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:Dynamsoft.PDF.PdfDestination.HasPage">
             Checks if an indirect reference to a page has been added.
            
             @return    <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDestination.AddPage(Dynamsoft.PDF.PdfIndirectReference)">
            Adds the indirect reference of the destination page.
            
             @param page    an indirect reference
             @return true if the page reference was added
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfDocument" -->
        <member name="M:Dynamsoft.PDF.PdfDocument.#ctor">
            Constructs a new PDF document.
            @throws DocumentException on error
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.writer">
            The <CODE>PdfWriter</CODE>. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.AddWriter(Dynamsoft.PDF.PdfWriter)">
             Adds a <CODE>PdfWriter</CODE> to the <CODE>PdfDocument</CODE>.
            
             @param writer the <CODE>PdfWriter</CODE> that writes everything
                                 what is added to this document to an outputstream.
             @throws DocumentException on error
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.text">
            This is the PdfContentByte object, containing the text. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.graphics">
            This is the PdfContentByte object, containing the borders and other Graphics. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.leading">
            This represents the leading of the lines. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.currentHeight">
            This is the current height of the document. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.isSectionTitle">
            Signals that onParagraph is valid (to avoid that a Chapter/Section title is treated as a Paragraph).
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.leadingCount">
            Signals that the current leading has to be subtracted from a YMark object.
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.alignment">
            This represents the current alignment of the PDF Elements. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.lastElementType">
            Holds the type of the last element, that has been added to the document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.Add(Dynamsoft.PDF.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @param element the element to add
             @return <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws DocumentException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDocument.Open" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDocument.Close" -->
        <member name="M:Dynamsoft.PDF.PdfDocument.NewPage">
             Makes a new page and sends it to the <CODE>PdfWriter</CODE>.
            
             @return a <CODE>bool</CODE>
             @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.SetPageSize(Dynamsoft.PDF.Rectangle)">
             Sets the pagesize.
            
             @param pageSize the new pagesize
             @return <CODE>true</CODE> if the page size was set
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.nextMarginLeft">
            margin in x direction starting from the left. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.nextMarginRight">
            margin in x direction starting from the right. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.nextMarginTop">
            margin in y direction starting from the top. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.nextMarginBottom">
            margin in y direction starting from the bottom. Will be valid in the next page 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the margins.
            
             @param    marginLeft      the margin on the left
             @param    marginRight     the margin on the right
             @param    marginTop       the margin on the top
             @param    marginBottom    the margin on the bottom
             @return   a <CODE>bool</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.SetMarginMirroring(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(bool)
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since    2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.ResetPageCount">
            Sets the page number to 0.
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.firstPageEvent">
            Signals that OnOpenDocument should be called. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfDocument.InitPage" -->
        <member name="F:Dynamsoft.PDF.PdfDocument.info">
            some meta information about the Document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.GetCatalog(Dynamsoft.PDF.PdfIndirectReference)">
             Gets the <CODE>PdfCatalog</CODE>-object.
            
             @param pages an indirect reference to this document pages
             @return <CODE>PdfCatalog</CODE>
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.viewerPreferences">
            Contains the Viewer preferences of this PDF document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.AddViewerPreference(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName, com.lowagie.text.pdf.PdfObject) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.nextPageSize">
            This is the size of the next page. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.thisBoxSize">
            This is the size of the several boxes of the current Page. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.boxSize">
            This is the size of the several boxes that will be used in
            the next page. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.pageEmpty">
            This checks if the page is empty. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.strictImageSequence">
            Holds value of property strictImageSequence. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.imageEnd">
            This is the position where the image ends. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.imageWait">
            This is the image that could not be shown on a previous page. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.Add(Dynamsoft.PDF.Images.Image)">
            Adds an image to the document.
            @param image the <CODE>Image</CODE> to add
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.Leading">
            Getter for the current leading.
            @return  the current leading
            @since   2.1.2
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.PageCount">
             Sets the page number.
            
             @param    pageN       the new page number
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.IndentLeft">
             Gets the indentation on the left side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.IndentRight">
             Gets the indentation on the right side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.IndentTop">
             Gets the indentation on the top side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.IndentBottom">
             Gets the indentation on the bottom side.
            
             @return   a margin
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.PDF.PdfDocument.Info" -->
        <member name="P:Dynamsoft.PDF.PdfDocument.ViewerPreferences">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int) 
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.StrictImageSequence">
            Setter for property strictImageSequence.
             @param strictImageSequence New value of property strictImageSequence.
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfDocument.PdfInfo" -->
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.#ctor">
            Construct a <CODE>PdfInfo</CODE>-object.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.#ctor(System.String,System.String,System.String)">
             Constructs a <CODE>PdfInfo</CODE>-object.
            
             @param        author      name of the author of the document
             @param        title       title of the document
             @param        subject     subject of the document
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddTitle(System.String)">
             Adds the title of the document.
            
             @param    title       the title of the document
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddSubject(System.String)">
             Adds the subject to the document.
            
             @param    subject     the subject of the document
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddKeywords(System.String)">
             Adds some keywords to the document.
            
             @param    keywords        the keywords of the document
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddAuthor(System.String)">
             Adds the name of the author to the document.
            
             @param    author      the name of the author
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddCreator(System.String)">
             Adds the name of the creator to the document.
            
             @param    creator     the name of the creator
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddProducer">
            Adds the name of the producer to the document.
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfInfo.AddCreationDate">
            Adds the date of creation to the document.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfDocument.PdfCatalog" -->
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfCatalog.#ctor(Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfWriter)">
             Constructs a <CODE>PdfCatalog</CODE>.
            
             @param        pages       an indirect reference to the root of the document's Pages tree.
             @param writer the writer the catalog applies to
        </member>
        <member name="M:Dynamsoft.PDF.PdfDocument.PdfCatalog.AddNames(Dynamsoft.PDF.OrderedTree,System.Collections.Hashtable,System.Collections.Hashtable,Dynamsoft.PDF.PdfWriter)">
            Adds the names of the named destinations to the catalog.
            @param localDestinations the local destinations
            @param documentJavaScript the javascript used in the document
            @param writer the writer the catalog applies to
        </member>
        <member name="P:Dynamsoft.PDF.PdfDocument.PdfCatalog.AdditionalActions">
            Sets the document level additional actions.
            @param actions   dictionary of actions
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.indentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.sectionIndentLeft">
            Indentation to the left caused by a section. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.listIndentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.imageIndentLeft">
            This is the indentation caused by an image on the left. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.indentRight">
            This represents the current indentation of the PDF Elements on the right side. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.sectionIndentRight">
            Indentation to the right caused by a section. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.imageIndentRight">
            This is the indentation caused by an image on the right. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.indentTop">
            This represents the current indentation of the PDF Elements on the top side. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfDocument.Indentation.indentBottom">
            This represents the current indentation of the PDF Elements on the bottom side. 
        </member>
        <member name="T:Dynamsoft.PDF.PdfException">
             Signals that an unspecified problem while constructing a PDF document.
            
             @see        BadPdfFormatException
        </member>
        <member name="T:Dynamsoft.PDF.PdfICCBased">
             A <CODE>PdfICCBased</CODE> defines a ColorSpace
            
             @see        PdfStream
        </member>
        <member name="M:Dynamsoft.PDF.PdfICCBased.#ctor(Dynamsoft.PDF.ICC_Profile)">
            Creates an ICC stream.
            @param   profile an ICC profile
        </member>
        <member name="M:Dynamsoft.PDF.PdfICCBased.#ctor(Dynamsoft.PDF.ICC_Profile,System.Int32)">
             Creates an ICC stream.
            
             @param   compressionLevel    the compressionLevel
            
             @param   profile an ICC profile
             @since   2.1.3   (replacing the constructor without param compressionLevel)
        </member>
        <member name="T:Dynamsoft.PDF.PdfImage">
            <CODE>PdfImage</CODE> is a <CODE>PdfStream</CODE> containing an image-<CODE>Dictionary</CODE> and -stream.
        </member>
        <member name="F:Dynamsoft.PDF.PdfImage.name">
            This is the <CODE>PdfName</CODE> of the image. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfImage.#ctor(Dynamsoft.PDF.Images.Image,System.String,Dynamsoft.PDF.PdfIndirectReference)">
             Constructs a <CODE>PdfImage</CODE>-object.
            
             @param image the <CODE>Image</CODE>-object
             @param name the <CODE>PdfName</CODE> for this image
             @throws BadPdfFormatException on error
        </member>
        <member name="P:Dynamsoft.PDF.PdfImage.Name">
             Returns the <CODE>PdfName</CODE> of the image.
            
             @return        the name
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfIndirectObject" -->
        <member name="F:Dynamsoft.PDF.PdfIndirectObject.number">
            The object number 
        </member>
        <member name="F:Dynamsoft.PDF.PdfIndirectObject.generation">
            the generation number 
        </member>
        <member name="M:Dynamsoft.PDF.PdfIndirectObject.#ctor(System.Int32,Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        objecti            the direct objecti
        </member>
        <member name="M:Dynamsoft.PDF.PdfIndirectObject.#ctor(System.Int32,System.Int32,Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        generation        the generation number
             @param        objecti            the direct objecti
        </member>
        <member name="M:Dynamsoft.PDF.PdfIndirectObject.WriteTo(System.IO.Stream)">
             Writes eficiently to a stream
            
             @param os the stream to write to
             @throws IOException on write error
        </member>
        <member name="P:Dynamsoft.PDF.PdfIndirectObject.IndirectReference">
             Returns a <CODE>PdfIndirectReference</CODE> to this <CODE>PdfIndirectObject</CODE>.
            
             @return        a <CODE>PdfIndirectReference</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfPage" -->
        <member name="F:Dynamsoft.PDF.PdfPage.PORTRAIT">
            value of the <B>Rotate</B> key for a page in PORTRAIT 
        </member>
        <member name="F:Dynamsoft.PDF.PdfPage.LANDSCAPE">
            value of the <B>Rotate</B> key for a page in LANDSCAPE 
        </member>
        <member name="F:Dynamsoft.PDF.PdfPage.INVERTEDPORTRAIT">
            value of the <B>Rotate</B> key for a page in INVERTEDPORTRAIT 
        </member>
        <member name="F:Dynamsoft.PDF.PdfPage.SEASCAPE">
            value of the <B>Rotate</B> key for a page in SEASCAPE 
        </member>
        <member name="F:Dynamsoft.PDF.PdfPage.mediaBox">
            value of the <B>MediaBox</B> key 
        </member>
        <member name="M:Dynamsoft.PDF.PdfPage.#ctor(Dynamsoft.PDF.PdfRectangle,System.Collections.Hashtable,Dynamsoft.PDF.PdfDictionary,System.Int32)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
             @param       rotate          a value for the <B>Rotate</B> key
        </member>
        <member name="M:Dynamsoft.PDF.PdfPage.#ctor(Dynamsoft.PDF.PdfRectangle,System.Collections.Hashtable,Dynamsoft.PDF.PdfDictionary)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfPage.IsParent" -->
        <member name="M:Dynamsoft.PDF.PdfPage.Add(Dynamsoft.PDF.PdfIndirectReference)">
             Adds an indirect reference pointing to a <CODE>PdfContents</CODE>-object.
            
             @param       contents        an indirect reference to a <CODE>PdfContents</CODE>-object
        </member>
        <member name="M:Dynamsoft.PDF.PdfPage.RotateMediaBox">
             Rotates the mediabox, but not the text in it.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfPage.MediaBox">
             Returns the MediaBox of this Page.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfPages" -->
        <member name="M:Dynamsoft.PDF.PdfPages.#ctor(Dynamsoft.PDF.PdfWriter)">
            Constructs a <CODE>PdfPages</CODE>-object.
        </member>
        <member name="T:Dynamsoft.PDF.PdfReaderInstance">
             Instance of PdfReader in each output document.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfRectangle" -->
        <member name="F:Dynamsoft.PDF.PdfRectangle.llx">
            lower left x 
        </member>
        <member name="F:Dynamsoft.PDF.PdfRectangle.lly">
            lower left y 
        </member>
        <member name="F:Dynamsoft.PDF.PdfRectangle.urx">
            upper right x 
        </member>
        <member name="F:Dynamsoft.PDF.PdfRectangle.ury">
            upper right y 
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object.
            
             @param       llx         lower left x
             @param       lly         lower left y
             @param       urx         upper right x
             @param       ury         upper right y
            
             @since       rugPdf0.10
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.#ctor(System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object starting from the origin (0, 0).
            
             @param       urx         upper right x
             @param       ury         upper right y
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.#ctor(Dynamsoft.PDF.Rectangle,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object with a <CODE>Rectangle</CODE>-object.
            
             @param   rectangle   a <CODE>Rectangle</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.Add(Dynamsoft.PDF.PdfObject)">
             Overrides the <CODE>add</CODE>-method in <CODE>PdfArray</CODE> in order to prevent the adding of extra object to the array.
            
             @param       object          <CODE>PdfObject</CODE> to add (will not be added here)
             @return      <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.Add(System.Single[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.Add(System.Int32[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.AddFirst(Dynamsoft.PDF.PdfObject)">
            Block changes to the underlying PdfArray
            @param object Ignored.
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.GetLeft(System.Int32)">
             Returns the lower left x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left x-coordinate
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.GetRight(System.Int32)">
             Returns the upper right x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right x-coordinate
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.GetTop(System.Int32)">
             Returns the upper right y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right y-coordinate
        </member>
        <member name="M:Dynamsoft.PDF.PdfRectangle.GetBottom(System.Int32)">
             Returns the lower left y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left y-coordinate
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Rectangle">
            Returns the high level version of this PdfRectangle
            @return this PdfRectangle translated to class Rectangle
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Left">
             Returns the lower left x-coordinate.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Width">
             Returns the width of the rectangle.
            
             @return      a width
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Height">
             Returns the height of the rectangle.
            
             @return      a height
        </member>
        <member name="P:Dynamsoft.PDF.PdfRectangle.Rotate">
             Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfResources" -->
        <member name="M:Dynamsoft.PDF.PdfResources.#ctor">
            Constructs a PDF ResourcesDictionary.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfTextArray" -->
        <member name="M:Dynamsoft.PDF.PdfTextArray.Add(Dynamsoft.PDF.PdfNumber)">
             Adds a <CODE>PdfNumber</CODE> to the <CODE>PdfArray</CODE>.
            
             @param  number   displacement of the string
        </member>
        <member name="T:Dynamsoft.PDF.PdfVersionImp">
            Stores the PDF version information,
            knows how to write a PDF Header,
            and how to add the version to the catalog (if necessary).
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.HEADER">
            Contains different strings that are part of the header. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.headerWasWritten">
            Indicates if the header was already written. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.appendmode">
            Indicates if we are working in append mode. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.header_version">
            The version that was or will be written to the header. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.catalog_version">
            The version that will be written to the catalog. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfVersionImp.extensions">
            The extensions dictionary.
            @since	2.1.6
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.SetPdfVersion(Dynamsoft.PDF.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.SetAppendmode(System.Boolean)">
            Sets the append mode.
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.WriteHeader(Dynamsoft.PDF.OutputStreamCounter)">
            Writes the header to the OutputStreamCounter.
            @throws IOException 
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.GetVersionAsName(System.Char)">
            Returns the PDF version as a name.
            @param version    the version character.
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.GetVersionAsByteArray(System.Char)">
            Returns the version as a byte[].
            @param version the version character
        </member>
        <member name="M:Dynamsoft.PDF.PdfVersionImp.AddToCatalog(Dynamsoft.PDF.PdfDictionary)">
            Adds the version to the Catalog dictionary. 
        </member>
        <member name="P:Dynamsoft.PDF.PdfVersionImp.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <member name="T:Dynamsoft.PDF.PdfWriter">
            A <CODE>DocWriter</CODE> class for PDF.
            <P>
            When this <CODE>PdfWriter</CODE> is added
            to a certain <CODE>PdfDocument</CODE>, the PDF representation of every Element
            added to this Document will be written to the outputstream.</P>
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.GENERATION_MAX">
            The highest generation number possible.
            @since   iText 2.1.6
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_2">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_3">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_4">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_5">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_6">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.VERSION_1_7">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutSinglePage">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutOneColumn">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutTwoColumnLeft">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutTwoColumnRight">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutTwoPageLeft">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageLayoutTwoPageRight">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeFullScreen">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PageModeUseAttachments">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.HideToolbar">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.HideMenubar">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.HideWindowUI">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.FitWindow">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.CenterWindow">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.DisplayDocTitle">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.NonFullScreenPageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.NonFullScreenPageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.NonFullScreenPageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.NonFullScreenPageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.DirectionL2R">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.DirectionR2L">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PrintScalingNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDFXNONE">
            PDF/X level 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDFX1A2001">
            PDF/X level 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDFX32002">
            PDF/X level 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDFA1A">
            PDFA-1A level. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDFA1B">
            PDFA-1B level. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.STANDARD_ENCRYPTION_40">
            Type of encryption 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.STANDARD_ENCRYPTION_128">
            Type of encryption 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.ENCRYPTION_AES_128">
            Type of encryption 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.ENCRYPTION_AES_256">
            Type of encryption 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.ENCRYPTION_MASK">
            Mask to separate the encryption type from the encryption mode. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.DO_NOT_ENCRYPT_METADATA">
            Add this to the mode to keep the metadata in clear text 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.EMBEDDED_FILES_ONLY">
            Add this to the mode to keep encrypt only the embedded files.
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.fullCompression">
            Holds value of property fullCompression.
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.#ctor">
            Constructs a <CODE>PdfWriter</CODE>.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.#ctor(Dynamsoft.PDF.PdfDocument,System.IO.Stream)" -->
        <member name="F:Dynamsoft.PDF.PdfWriter.pdf">
            the pdfdocument object. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.directContent">
            The direct content in this document. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.directContentUnder">
            The direct content under in this document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.ResetContent">
            Resets all the direct contents to empty.
            This happens when a new page is started.
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.body">
            body of the PDF document 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddLocalDestinations(Dynamsoft.PDF.OrderedTree)">
            Adds the local destinations to the body of the document.
            @param dest the <CODE>Hashtable</CODE> containing the destinations
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject)">
            Adds an object to the PDF body.
            @param object
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfIndirectReference)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfIndirectReference,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject,System.Int32)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddToBody(Dynamsoft.PDF.PdfObject,System.Int32,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.extraCatalog">
            Holds value of property extraCatalog. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.root">
            The root of the page tree. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.pageReferences">
            The PdfIndirectReference to the pages. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.currentPageNumber">
            The current page number. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.tabs">
            The value of the Tabs entry in the page dictionary.
            @since   2.1.5
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.SetLinearPageMode">
            Use this method to make sure the page tree has a lineair structure
            (every leave is attached directly to the root).
            Use this method to allow page reordering with method reorderPages.
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.ReorderPages(System.Int32[])">
            Use this method to reorder the pages in the document.
            A <CODE>null</CODE> argument value only returns the number of pages to process.
            It is advisable to issue a <CODE>Document.newPage()</CODE> before using this method.
            @return the total number of pages
            @param order an array with the new page sequence. It must have the
            same size as the number of pages.
            @throws DocumentException if all the pages are not present in the array
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.GetPageReference(System.Int32)">
            Use this method to get a reference to a page existing or not.
            If the page does not exist yet the reference will be created
            in advance. If on closing the document, a page number greater
            than the total number of pages was requested, an exception
            is thrown.
            @param page the page number. The first page is 1
            @return the reference to the page
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_2">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_3">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_4">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_5">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_6">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PDF_VERSION_1_7">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.pdf_version">
            Stores the version information for the header and the catalog. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.SetPdfVersion(Dynamsoft.PDF.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.GetPdfVersion">
            Returns the version information.
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.prevxref">
            A number refering to the previous Cross-Reference Table. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.Open" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.Close" -->
        <member name="M:Dynamsoft.PDF.PdfWriter.AddViewerPreference(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)">
            Adds a viewer preference
            @param preferences the viewer preferences
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.pdfxConformance">
            Stores the PDF/X level. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.IsPdfX">
            @see com.lowagie.text.pdf.interfaces.PdfXConformance#isPdfX() 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.SetBoxSize(System.String,Dynamsoft.PDF.Rectangle)">
            Sets the page box sizes. Allowed names are: "crop", "trim", "art" and "bleed".
            @param boxName the box size
            @param size the size
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.SetDefaultColorspace(Dynamsoft.PDF.PdfName,Dynamsoft.PDF.PdfObject)" -->
        <member name="F:Dynamsoft.PDF.PdfWriter.imageDictionary">
            Dictionary, containing all the images of the PDF document 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.images">
            This is the list with all the images in the document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddDirectImageSimple(Dynamsoft.PDF.Images.Image)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddDirectImageSimple(Dynamsoft.PDF.Images.Image,Dynamsoft.PDF.PdfIndirectReference)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @param fixedRef the reference to used. It may be <CODE>null</CODE>,
            a <CODE>PdfIndirectReference</CODE> or a <CODE>PRIndirectReference</CODE>.
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.Add(Dynamsoft.PDF.PdfImage,Dynamsoft.PDF.PdfIndirectReference)">
             Writes a <CODE>PdfImage</CODE> to the outputstream.
            
             @param pdfImage the image to be added
             @return a <CODE>PdfIndirectReference</CODE> to the encapsulated image
             @throws PdfException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.Add(Dynamsoft.PDF.PdfPage,Dynamsoft.PDF.PdfContents)" -->
        <member name="M:Dynamsoft.PDF.PdfWriter.GetImageReference(Dynamsoft.PDF.PdfName)">
             return the <CODE>PdfIndirectReference</CODE> to the image with a given name.
            
             @param name the name of the image
             @return a <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.rgbTransparencyBlending">
            Holds value of property RGBTranparency.
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.AddAnnotation(Dynamsoft.PDF.PdfAnnotation)">
            Adds a <CODE>PdfAnnotation</CODE> or a <CODE>PdfFormField</CODE>
            to the document. Only the top parent of a <CODE>PdfFormField</CODE>
            needs to be added.
            @param annot the <CODE>PdfAnnotation</CODE> or the <CODE>PdfFormField</CODE> to add
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> associated with this writer.
            @return the <CODE>PdfDocument</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.Info">
            Use this method to get the info dictionary if you want to
            change it directly (add keys and values to the info dictionary).
            @return the info dictionary
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.DirectContent">
            Use this method to get the direct content for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.DirectContentUnder">
            Use this method to get the direct content under for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfIndirectReference">
            Gets a <CODE>PdfIndirectReference</CODE> for an object that
            will be created in the future.
            @return the <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.Os">
            Returns the outputStreamCounter.
            @return the outputStreamCounter
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.ExtraCatalog">
            Sets extra keys to the catalog.
            @return the catalog to change
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PageNumber">
            Gets the pagenumber of this document.
            This number can be different from the real pagenumber,
            if you have (re)set the page number previously.
            @return a page number
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.Tabs">
            Sets the value for the Tabs entry in the page tree.
            @param	tabs	Can be PdfName.R, PdfName.C or PdfName.S.
            Since the Adobe Extensions Level 3, it can also be PdfName.A
            or PdfName.W
            @since	2.1.5
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.CurrentDocumentSize">
            Gets the current document size. This size only includes
            the data already writen to the output stream, it does not
            include templates or fonts. It is usefull if used with
            <CODE>freeReader()</CODE> when concatenating many documents
            and an idea of the current size is needed.
            @return the approximate size without fonts or templates
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PDFXConformance">
            Sets the PDFX conformance level. Allowed values are PDFX1A2001 and PDFX32002. It
            must be called before opening the document.
            @param pdfxConformance the conformance level
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PageSize">
            Gives the size of the media box.
            @return a Rectangle
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.CropBoxSize">
            Sets the crop box. The crop box should not be rotated even if the
            page is rotated. This change only takes effect in the next
            page.
            @param crop the crop box
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PageEmpty">
            If you use SetPageEmpty(false), invoking NewPage() after a blank page will add a newPage.
            @param pageEmpty the state
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.DefaultColorspace">
            Gets the default colorspaces.
            @return the default colorspaces
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.StrictImageSequence">
            Sets the image sequence to follow the text in strict order.
             @param strictImageSequence new value of property strictImageSequence
            
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.RgbTransparencyBlending">
            Sets the transparency blending colorspace to RGB. The default blending colorspace is
            CMYK and will result in faded colors in the screen and in printing. Calling this method
            will return the RGB colors to what is expected. The RGB blending will be applied to all subsequent pages
            until other value is set.
            Note that this is a generic solution that may not work in all cases.
            @param rgbTransparencyBlending <code>true</code> to set the transparency blending colorspace to RGB, <code>false</code>
            to use the default blending colorspace
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.CompressionLevel">
            Sets the compression level to be used for streams written by this writer.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfWriter.PdfBody" -->
        <member name="F:Dynamsoft.PDF.PdfWriter.PdfBody.xrefs">
            array containing the cross-reference table of the normal objects. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PdfBody.position">
            the current byteposition in the body. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.#ctor(Dynamsoft.PDF.PdfWriter)">
            Constructs a new <CODE>PdfBody</CODE>.
            @param writer
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.PdfBody.Add(Dynamsoft.PDF.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.PDF.PdfWriter.PdfBody.Add(Dynamsoft.PDF.PdfObject,Dynamsoft.PDF.PdfIndirectReference)" -->
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.WriteCrossReferenceTable(System.IO.Stream,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfObject,System.Int32)">
            Returns the CrossReferenceTable of the <CODE>Body</CODE>.
            @param os
            @param root
            @param info
            @param encryption
            @param fileID
            @param prevxref
            @throws IOException
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfBody.PdfIndirectReference">
            Gets a PdfIndirectReference for an object that will be created in the future.
            @return a PdfIndirectReference
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfBody.Offset">
             Returns the offset of the Cross-Reference table.
            
             @return       an offset
        </member>
        <member name="P:Dynamsoft.PDF.PdfWriter.PdfBody.Size">
             Returns the total number of objects contained in the CrossReferenceTable of this <CODE>Body</CODE>.
            
             @return   a number of objects
        </member>
        <member name="T:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference">
            <CODE>PdfCrossReference</CODE> is an entry in the PDF Cross-Reference table.
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.offset">
            Byte offset in the PDF file. 
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.generation">
            generation of the object. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
            @param    generation  generationnumber of the object
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param os
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.Int32,System.IO.Stream)">
            Writes PDF syntax to the Stream
            @param midSize
            @param os
            @throws IOException
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.CompareTo(System.Object)">
            @see java.lang.Comparable#compareTo(java.lang.Object)
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfBody.PdfCrossReference.Equals(System.Object)">
            @see java.lang.Object#equals(java.lang.Object)
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.PDF.PdfWriter.PdfTrailer" -->
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfTrailer.#ctor(System.Int32,System.Int32,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfIndirectReference,Dynamsoft.PDF.PdfObject,System.Int32)">
             Constructs a PDF-Trailer.
            
             @param        size        the number of entries in the <CODE>PdfCrossReferenceTable</CODE>
             @param        offset      offset of the <CODE>PdfCrossReferenceTable</CODE>
             @param        root        an indirect reference to the root of the PDF document
             @param        info        an indirect reference to the info object of the PDF document
             @param encryption
             @param fileID
             @param prevxref
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriter.PdfTrailer.ToPdf(Dynamsoft.PDF.PdfWriter,System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param writer
            @param os
            @throws IOException
        </member>
        <member name="F:Dynamsoft.PDF.PdfWriterImp.xmpMetadata">
            XMP Metadata for the document. 
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriterImp.SetOutputIntents(System.String,System.String,System.String,System.String,Dynamsoft.PDF.ICC_Profile)">
            Sets the values of the output intent dictionary. Null values are allowed to
            suppress any key.
            @param outputConditionIdentifier a value
            @param outputCondition a value
            @param registryName a value
            @param info a value
            @param destOutputProfile a value
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriterImp.GetInstance(Dynamsoft.PDF.Document,System.IO.Stream,Dynamsoft.PDF.PDFInfo)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @param    document    The <CODE>Document</CODE> that has to be written
             @param    os  The <CODE>Stream</CODE> the writer has to write to.
             @return   a new <CODE>PdfWriter</CODE>
            
             @throws   DocumentException on error
        </member>
        <member name="M:Dynamsoft.PDF.PdfWriterImp.GetInstance(Dynamsoft.PDF.Document,System.IO.Stream,Dynamsoft.PDF.PDFInfo,Dynamsoft.PDF.IDocListener)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @return a new <CODE>PdfWriter</CODE>
             @param document The <CODE>Document</CODE> that has to be written
             @param os The <CODE>Stream</CODE> the writer has to write to.
             @param listener A <CODE>DocListener</CODE> to pass to the PdfDocument.
             @throws DocumentException on error
        </member>
        <member name="T:Dynamsoft.PDF.RectangleReadOnly">
            <summary>
            A RectangleReadOnly is the representation of a geometric figure.
            It's the same as a Rectangle but immutable.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.#ctor(Dynamsoft.PDF.Rectangle)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.CloneNonPositionParameters(Dynamsoft.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.SoftCloneNonPositionParameters(Dynamsoft.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.PDF.RectangleReadOnly.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.PDF.RectangleReadOnly.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="T:Dynamsoft.PDF.Utilities">
            A collection of convenience methods that were present in many different iText
            classes.
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.GetKeySet(Dynamsoft.PDF.Properties)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.AddToArray(System.Object[][],System.Object[])">
            Utility method to extend an array.
            @param original the original array or <CODE>null</CODE>
            @param item the item to be added to the array
            @return a new array with the item appended
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.CheckTrueOrFalse(Dynamsoft.PDF.Properties,System.String)">
            Checks for a true/false value of a key in a Properties object.
            @param attributes
            @param key
            @return
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.ToURL(System.String)">
            <summary>
            This method makes a valid URL from a given filename.
            </summary>
            <remarks>
            
            </remarks>
            <param name="filename">a given filename</param>
            <returns>a valid URL</returns>
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.UnEscapeURL(System.String)">
            Unescapes an URL. All the "%xx" are replaced by the 'xx' hex char value.
            @param src the url to unescape
            @return the eunescaped value
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.Skip(System.IO.Stream,System.Int32)">
            <summary>
            This method is an alternative for the Stream.Skip()-method
            that doesn't seem to work properly for big values of size.
            </summary>
            <param name="istr">the stream</param>
            <param name="size">the number of bytes to skip</param>
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.MillimetersToPoints(System.Single)">
            Measurement conversion from millimeters to points.
            @param    value   a value in millimeters
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.MillimetersToInches(System.Single)">
            Measurement conversion from millimeters to inches.
            @param    value   a value in millimeters
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.PointsToMillimeters(System.Single)">
            Measurement conversion from points to millimeters.
            @param    value   a value in points
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.PointsToInches(System.Single)">
            Measurement conversion from points to inches.
            @param    value   a value in points
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.InchesToMillimeters(System.Single)">
            Measurement conversion from inches to millimeters.
            @param    value   a value in inches
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.PDF.Utilities.InchesToPoints(System.Single)">
            Measurement conversion from inches to points.
            @param    value   a value in inches
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="T:Dynamsoft.PDF.Permission">
            <summary>
            A class of PDF Permission.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.Permission.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Specifies each permission for the PDF.
            </summary>
            <param name="bCanPrint">
            Specifies if can be printed.
            </param>
            <param name="bCanCopy">
            Specifies if can be copied.
            </param>
            <param name="bCanChange">
            Specifies if can be changed.
            </param>
            <param name="bCanaddNotes">
            Specifies if can add notes.
            </param>
            <param name="bCanFillFields">
            Specifies if can fill fields.
            </param>
            <param name="bCanCopyAccess">
            Specifies if can copy access.
            </param>
            <param name="bCanAssemble">
            Specifies if assemble.
            </param>
            <param name="bCanPrintFull">
            Specifies if can print full.
            </param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanPrint">
            <summary>
            Returns or sets if the PDF can be printed. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanCopy">
            <summary>
            Returns or sets if the PDF can be copied. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanChange">
            <summary>
            Returns or sets if the PDF can be changed. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanAddNotes">
            <summary>
            Returns or sets if notes can be added in the PDF. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanFillFields">
            <summary>
            Returns or sets if the filelds can be filled in the PDF. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanCopyAccess">
            <summary>
            Returns or sets if the copy access is valid in the PDF. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanAssemble">
            <summary>
            Returns or sets if the PDF is assemble. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="P:Dynamsoft.PDF.Permission.CanPrintFull">
            <summary>
            Returns or sets if the PDF can be print full. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="T:Dynamsoft.PDF.ErrorCode">
            <summary>
            Defines the error code of Dynamsoft.PDF.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumSuccess">
            <summary>
            Successful.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumLicenseInvalid">
            <summary>
            Invalid license.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumLicenseExpired">
            <summary>
            Expired license.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumSystemException">
            <summary>
            System exception
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumUnknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumFailedToLoadModule">
            <summary>
            Failed to load rasterizer module.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumFailedToGetFunction">
            <summary>
            Failed to get function.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumInvalidValue">
            <summary>
            Invalid value.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumFailedToSaveImage">
            <summary>
            Failed to save  image.
            </summary>
        </member>
        <member name="F:Dynamsoft.PDF.ErrorCode.enumAnnoLicenseInvalid">
            <summary>
            Invalid annotation license.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.IConvertCallback">
            <summary>
            The interface is used by PDFRasterizer object to process the result of parsing the PDF file.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.ISave">
            <summary>
            The interface is used by PDFCreator object to get information about the pictures that need to be saved.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.ISave.GetPageCount">
            <summary>
            The PDFCreator object call this API to get the count the saved images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.ISave.GetImage(System.Int32)">
            <summary>
            The PDFCreator object call this API to get the image.
            </summary>
            <param name="iPageNumber">The index of PDF page.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.PDF.ISave.GetAnnotations(System.Int32)">
            <summary>
            The PDFCreator object call this API to get the Annotation object.
            </summary>
            <param name="iPageNumber">The index of PDF page. </param>
            <returns></returns>
        </member>
        <member name="T:Dynamsoft.PDF.Common.Margin">
            <summary>
            stores a set of four integers that represent the location and size of a rect.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Common.Margin.Left">
            <summary>
            Gets the x-coorindate of the upper-left corner of the rect.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Common.Margin.Top">
            <summary>
            Gets the y-coorindate of the upper-left corner of the rect.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Common.Margin.Right">
            <summary>
            Gets the y-coorindate of the bottom-right corner of the rect.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Common.Margin.Bottom">
            <summary>
            Gets the x-coorindate of the bottom-right corner of the rect.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.PDFRasterizer">
            <summary>
            Defines a class provides functions for converting PDF file to images.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.PDFRasterizer.#ctor(System.String)">
            <summary>
            Initialize the PDF Rasterizer component with features to convert PDF to images.
            </summary>
            <param name="strLicense">Specifies the license.</param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFRasterizer.ConvertToImage(System.String,System.String,System.Single,Dynamsoft.PDF.IConvertCallback)">
            <summary>
            Converts a local PDF file to image.
            </summary>
            <param name="strFilePath">The name of the PDF to be converted. It should be the absolute path of the PDF on the local disk.</param>
            <param name="strPassword">The password of the PDF.</param>
            <param name="fResolution">Specifies the output image resolution.</param>
            <param name="callback">The callback function.</param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFRasterizer.ConvertToImage(System.Byte[],System.String,System.Single,Dynamsoft.PDF.IConvertCallback)">
            <summary>
            Converts a byte array of a PDF file to image.
            </summary>
            <param name="bytes">The byte array of a PDF file to be converted.</param>
            <param name="strPassword">The password of the PDF.</param>
            <param name="fResolution">Specifies the output image resolution.</param>
            <param name="callback">The callback function.</param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFRasterizer.ConvertMode">
            <summary>
            Returns or sets the convert mode. 
            </summary>
            <exception cref="!:Dynamsoft.Camera.CameraException">
            When an error occurs, please check CameraException.
            </exception> 
        </member>
        <member name="T:Dynamsoft.PDF.PDFCreator">
            <summary>
            Defines a class provides functions for saving images as PDF format.
            </summary>
        </member>
        <member name="M:Dynamsoft.PDF.PDFCreator.#ctor(System.String)">
            <summary>
            Initialize the PDF Creator component with the features to create a PDF with permissions.
            </summary>
            <param name="strLicense">Specifies the license.</param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFCreator.Save(Dynamsoft.PDF.ISave,System.String)">
            <summary>
            Saves image(s) as a PDF file.
            </summary>
            <param name="iSave">
            The interface with the image information.
            </param>
            <param name="strFileName">
            String strFileName:the name of the Multi-Page PDF file to be saved. It should be a local path on the local disk.
            </param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFCreator.SaveAsBytes(Dynamsoft.PDF.ISave)">
            <summary>
            Saves image(s) as a Byte file.
            </summary>
            <param name="iSave">
            The interface with the image information.
            </param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFCreator.Merge(System.String,System.String[])">
            <summary>
            Merges PDF files on disk and save the merged document to a new file.
            </summary>
            <param name="strOutputFileName">
            Specifies the name of the PDF files as the result.
            </param>
            <param name="strInputFileName">
            Specifies the name(s) of the existing PDF files on local disk to be merged.
            </param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.PDFCreator.Encrypt(System.String,System.String,System.String,System.String,Dynamsoft.PDF.Enums.EnumEncryption,Dynamsoft.PDF.Permission)">
            <summary>
            Adds the specified security to the selected document.
            </summary>
            <param name="strOutputFileName">
            Specifies the name of the PDF files as the result.
            </param>
            <param name="strInputFileName">
            Specifies the name(s) of the existing PDF files on local disk to be merged.
            </param>
            <param name="ownerPassword">
            Specifies the owner password of the new PDF file.
            </param>
            <param name="userPassword">
            Specifies the user password of the new PDF file.
            </param>
            <param name="encryption">
            Specifies encryption of the new PDF file.
            </param>
            <param name="permission">
            Specifies permission of the new PDF file.
            </param>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Author">
            <summary>
            Returns or sets the name of the person who creates the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.CreatorName">
            <summary>
            Returns or sets the name of the application that created the original document. It is used when the PDF document is converted from another form.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Keywords">
            <summary>
            Returns or sets the keywords associated with the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.ModifiedDate">
            <summary>
            Returns or sets the date when the PDF document is last modified.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
            <remarks>
            The default value is current date.
            </remarks>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Producer">
            <summary>
            Returns or sets the name of the application that converted the PDF document from its native.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Subject">
            <summary>
            Returns or sets the subject of the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Title">
            <summary>
            Returns or sets the title of the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.Margin">
            <summary>
            Returns or sets the margin of the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="P:Dynamsoft.PDF.PDFCreator.JPEGQuality">
            <summary>
            Returns or sets the quality of the JPEG file.
            </summary>
            <exception cref="T:Dynamsoft.PDF.RasterizerException">
            When an error occurs, please check RasterizerException.
            </exception>
        </member>
        <member name="M:Dynamsoft.PDF.RasterizerException.#ctor">
            <summary>
            Create an instance of barcode generator exception.
            </summary>
        </member>
        <member name="T:Dynamsoft.PDF.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dynamsoft.PDF.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
