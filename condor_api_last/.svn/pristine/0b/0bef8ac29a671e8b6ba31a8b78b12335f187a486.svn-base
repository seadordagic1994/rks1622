using CondorExtreme3_UI.Helper;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CondorExtreme3_UI.Employees
{
    public partial class AddEmploymentForm : Form
    {
        public WebAPIHelper Service { get; set; }

        public AddEmploymentForm()
        {
            InitializeComponent();
            Service = new WebAPIHelper(WebAPIHelper.ApiUri, "api/Employees");

            HttpResponseMessage responseEmployees = Service.GetResponse("GetEmployeesForEmployment", (int)AuthenticationUI.CurrentCinema.CinemaID);
            if (responseEmployees.IsSuccessStatusCode)
            {
                cmbEmployeeNames.DataSource = responseEmployees.Content.ReadAsAsync<List<dynamic>>().Result;
                cmbEmployeeNames.ValueMember = "EmployeeID";
                cmbEmployeeNames.DisplayMember = "FullName";
            }
                                       
            HttpResponseMessage responseEmploymentTypes = Service.GetResponse("GetEmploymentTypesForEmployment");
            if (responseEmploymentTypes.IsSuccessStatusCode)
            {
                cmbEmploymentTypes.DataSource = responseEmploymentTypes.Content.ReadAsAsync<List<dynamic>>().Result;
                cmbEmploymentTypes.ValueMember = "EmploymentTypeID";
                cmbEmploymentTypes.DisplayMember = "Name";
            }
           
            HttpResponseMessage responseBanks = Service.GetResponse("GetBanks");
            if (responseBanks.IsSuccessStatusCode)
            {
                cmbBanks.DataSource = responseBanks.Content.ReadAsAsync<List<dynamic>>().Result;
                cmbBanks.ValueMember = "BankID";
                cmbBanks.DisplayMember = "Name";

            }


        }

        private void btnSaveEmployment_Click(object sender, EventArgs e)
        {
            if(Int32.Parse(cmbEmployeeNames.SelectedValue.ToString())==(int)AuthenticationUI.LoggedEmployee.EmployeeID)
            {
                MessageBox.Show(Messages.DirectorEmploymentAdd, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (this.ValidateChildren())
            {
                Employments employment = new Employments();
                employment.EmployeeID = Int32.Parse(cmbEmployeeNames.SelectedValue.ToString());
                employment.HireDate = dtHireDate.Value;
                employment.EmploymentTypeID = Int32.Parse(cmbEmploymentTypes.SelectedValue.ToString());
                employment.CurrentSalary = numCurrentSalary.Value;
                employment.BankID = Int32.Parse(cmbBanks.SelectedValue.ToString());
                employment.BankAccountNumber = txtBankAccountNumber.Text;

                HttpResponseMessage postEmployee = Service.PostResponse(employment, "PostEmployments");

                if (postEmployee.StatusCode==System.Net.HttpStatusCode.OK)
                {
                    MessageBox.Show(Messages.EmploymentAddSuccess, "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    DialogResult = DialogResult.OK;
                    Close();
                }
                else if(postEmployee.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    string MessageError = postEmployee.Content.ReadAsAsync<string>().Result;
                    MessageBox.Show(MessageError, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show(Messages.EmploymentAddFailure, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }


        }

        private void txtBankAccountNumber_TextChanged(object sender, EventArgs e)
        {
            txtBankAccountNumber_Validating(sender, new CancelEventArgs { });
        }

        private void txtBankAccountNumber_Validating(object sender, CancelEventArgs e)
        {
            string Pattern = @"^[0-9]{10,20}$";
            Regex regex = new Regex(Pattern);
            if (String.IsNullOrWhiteSpace(txtBankAccountNumber.Text))
            {
                e.Cancel = true;
                errorProvider.SetError(txtBankAccountNumber, Messages.BankAccountNumberRequired);
            }
            else if (!regex.IsMatch(txtBankAccountNumber.Text))
            {
                e.Cancel = true;
                errorProvider.SetError(txtBankAccountNumber, Messages.BankAccountNumberInvalidFormat);
            }
            else
            {
                errorProvider.SetError(txtBankAccountNumber, null);
            }
        }
    }
}
