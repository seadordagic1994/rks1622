using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CondorExtreme3_UI.Helper
{
    public class UIHelper
    {
        public static string GenerateSalt()
        {
            byte[] array = new byte[16];
            RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
            crypto.GetBytes(array);
            return Convert.ToBase64String(array);
        }

        public static string GenerateHash(string Password, string Salt)
        {
            byte[] bytePassword = Encoding.Unicode.GetBytes(Password);
            byte[] byteSalt = Convert.FromBase64String(Salt);
            byte[] forHashing = new byte[bytePassword.Length + byteSalt.Length];

            System.Buffer.BlockCopy(bytePassword, 0, forHashing, 0,bytePassword.Length);
            System.Buffer.BlockCopy(byteSalt, 0, forHashing, bytePassword.Length, byteSalt.Length);

            HashAlgorithm alg = HashAlgorithm.Create("SHA1");        
            return Convert.ToBase64String( alg.ComputeHash(forHashing));
        }

        #region Slike

        public static Image CropImage(Image img, Rectangle cropArea)
        {
            Bitmap bmpImage = new Bitmap(img);
            Bitmap bmpCrop = bmpImage.Clone(cropArea,
            bmpImage.PixelFormat);
            return (Image)(bmpCrop);
        }

        public static Image ResizeImage(Image imgToResize, Size size)
        {
            int sourceWidth = imgToResize.Width;
            int sourceHeight = imgToResize.Height;

            float nPercent = 0;
            float nPercentW = 0;
            float nPercentH = 0;

            nPercentW = ((float)size.Width / (float)sourceWidth);
            nPercentH = ((float)size.Height / (float)sourceHeight);

            if (nPercentH < nPercentW)
                nPercent = nPercentH;
            else
                nPercent = nPercentW;

            int destWidth = (int)(sourceWidth * nPercent);
            int destHeight = (int)(sourceHeight * nPercent);

            Bitmap b = new Bitmap(destWidth, destHeight);
            Graphics g = Graphics.FromImage((Image)b);
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;

            g.DrawImage(imgToResize, 0, 0, destWidth, destHeight);
            g.Dispose();

            return (Image)b;
        }

        #endregion

        

        public static void ResetAllControls(Form form)
        {
            foreach (Control control in form.Controls)
            {
                if (control is TextBox)
                {
                    TextBox textBox = (TextBox)control;
                    textBox.Text = null;
                }
                if (control is ComboBox)
                {
                    ComboBox comboBox = (ComboBox)control;
                    if (comboBox.Items.Count > 0)
                    { comboBox.SelectedIndex = 0;
                         }
                }
                if (control is CheckBox)
                {
                    CheckBox checkBox = (CheckBox)control;
                    checkBox.Checked = false;
                }
                if (control is ListBox)
                {
                    ListBox listBox = (ListBox)control;
                    listBox.ClearSelected();
                }
                if (control is CheckedListBox)
                {
                    CheckedListBox clb = (CheckedListBox)control;
                    clb.ClearSelected();
                }
                if (control is PictureBox)
                {
                    PictureBox pictureBox = (PictureBox)control;
                    pictureBox = null;
                }
            }
         }
        



    }
}
