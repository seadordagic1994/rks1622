using CondorExtreme3_UI.Helper;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CondorExtreme3_UI.Employees
{
    public partial class AddEmployeeForm : Form
    {
        public WebAPIHelper Service { get; set; }

        public AddEmployeeForm()
        {
            InitializeComponent();
            Service = new WebAPIHelper(WebAPIHelper.ApiUri, "api/Info");
            HttpResponseMessage Response = Service.GetResponse("GetCities");
            List<Object> cities = Response.Content.ReadAsAsync<List<Object>>().Result;
            cmbCities.DataSource = cities;
            cmbCities.DisplayMember = "Name";
            cmbCities.ValueMember = "CityID";
            cmbCities.SelectedIndex = -1;

            string[] Genders = { "Male", "Female" };
            cmbGender.DataSource = Genders;

            txtUsername.Enabled = false;
            txtPassword.Enabled = false;

        }


        private void AddEmployeeForm_Load(object sender, EventArgs e)
        {
           

        }

        private void btnSubmitEmployee_Click(object sender, EventArgs e)
        {
            if (this.ValidateChildren())
            {
                Service.Route= "api/Employees";
          
            
                Employees Employee = new Employees();
                Employee.FirstName = txtFirstName.Text;
                Employee.LastName = txtLastName.Text;
                Employee.CityBirthID = Int32.Parse(cmbCities.SelectedValue.ToString());
                Employee.BirthDate = dtpBirthDate.Value;
                Employee.Gender = (cmbGender.Text=="Male")?false:true;
                Employee.CurriculumVitae = txtCurriculumVitae.Text;
                Employee.Email = txtEmail.Text;           
                Employee.PhoneNumber = txtPhoneNumber.Text;              
                Employee.IsDeleted = false;
                Employee.CinemaID = AuthenticationUI.CurrentCinema.CinemaID;

                Employee.Username =  txtUsername.Text;
             
                string Password = txtPassword.Text;
                Employee.PasswordSalt = UIHelper.GenerateSalt();
                Employee.PasswordHash = UIHelper.GenerateHash(Password, Employee.PasswordSalt);
            
    
                HttpResponseMessage Response = Service.PostResponse(Employee, "PostEmployees");

                if (Response.StatusCode==System.Net.HttpStatusCode.OK)
                {
                    MessageBox.Show(Messages.EmployeeAddSuccess,"Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    DialogResult = DialogResult.OK;
                    Close();
                }
                else if (Response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    string messageError = Response.Content.ReadAsAsync<string>().Result;
                    MessageBox.Show(messageError, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show(Messages.EmployeeAddFailure, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private void btnResetAllFields_Click(object sender, EventArgs e)
        {
            UIHelper.ResetAllControls(this);


        }

        private void chkCreateAccount_CheckedChanged(object sender, EventArgs e)
        {
            if (chkCreateAccount.Checked)
            {
                txtUsername.Enabled = true;
                txtPassword.Enabled = true;
            }
            else
            {
                txtUsername.Text = "";
                txtPassword.Text = "";
                txtUsername.Enabled = false;
                txtPassword.Enabled = false;
            }
        }

        private void txtFirstName_Validating(object sender, CancelEventArgs e)
        {
            if (String.IsNullOrWhiteSpace(txtFirstName.Text))
            {
                e.Cancel = true;
                errorProvider.SetError(txtFirstName, Messages.FirstNameRequired);
            }
            else
                errorProvider.SetError(txtFirstName, null);

        }

        private void txtFirstName_TextChanged(object sender, EventArgs e)
        {
            txtFirstName_Validating(sender, new CancelEventArgs { });
        }

       
        private void txtLastName_Validating(object sender, CancelEventArgs e)
        {
            if (String.IsNullOrWhiteSpace(txtLastName.Text))
            {
                e.Cancel = true;
                errorProvider.SetError(txtLastName, Messages.LastNameRequired);
            }
            else
                errorProvider.SetError(txtLastName, null);
        }
        private void txtLastName_TextChanged(object sender, EventArgs e)
        {
            txtLastName_Validating(sender, new CancelEventArgs { });
        }

        private void cmbCities_Validating(object sender, CancelEventArgs e)
        {
            if (cmbCities.SelectedIndex == -1)
            {
                e.Cancel = true;
                errorProvider.SetError(cmbCities, Messages.CityRequired);
            }
            else
                errorProvider.SetError(cmbCities, null);
        }

        private void cmbCities_SelectionChangeCommitted(object sender, EventArgs e)
        {
            cmbCities_Validating(sender, new CancelEventArgs { });
        }

        private void txtPhoneNumber_TextChanged(object sender, EventArgs e)
        {
            txtPhoneNumber_Validating(sender, new CancelEventArgs { });
        }

        private void txtPhoneNumber_Validating(object sender, CancelEventArgs e)
        {
            if (!txtPhoneNumber.MaskCompleted)
            {
                e.Cancel = true;
                errorProvider.SetError(txtPhoneNumber, Messages.PhoneNumberRequired);
            }
            else
                errorProvider.SetError(txtPhoneNumber, null);
        }

        private void txtEmail_TextChanged(object sender, EventArgs e)
        {
            txtEmail_Validating(sender, new CancelEventArgs { });
        }

        private void txtEmail_Validating(object sender, CancelEventArgs e)
        {
            if (String.IsNullOrWhiteSpace(txtEmail.Text))
            {
                e.Cancel = true;
                errorProvider.SetError(txtEmail, Messages.EmailRequired);
            }
            else
            {
                try
                {
                    MailAddress mailAddress = new MailAddress(txtEmail.Text);
                }
                catch (Exception)
                {
                    e.Cancel = true;
                    errorProvider.SetError(txtEmail, Messages.EmailWrongFormat);
                }
                if (!e.Cancel)
                    errorProvider.SetError(txtEmail, null);
            }
        }

        private void txtUsername_Validating(object sender, CancelEventArgs e)
        {
            if (txtUsername.Enabled)
            {
                string pattern = @"^[a-zA-Z0-9]*$";
                Regex regex = new Regex(pattern);

                if (String.IsNullOrWhiteSpace(txtUsername.Text))
                {
                    e.Cancel = true;
                    errorProvider.SetError(txtUsername, Messages.UsernameRequired);
                }
                else if (!regex.IsMatch(txtUsername.Text))
                {
                    e.Cancel = true;
                    errorProvider.SetError(txtUsername, Messages.UsernameInvalidFormat);
                }
                else
                    errorProvider.SetError(txtUsername, null);
            }
            else
            {
                errorProvider.SetError(txtUsername, null);
            }
        }

        private void txtUsername_TextChanged(object sender, EventArgs e)
        {
            txtUsername_Validating(sender, new CancelEventArgs { });
        }

        private void txtPassword_Validating(object sender, CancelEventArgs e)
        {
            if (txtPassword.Enabled) {
                if (String.IsNullOrWhiteSpace(txtPassword.Text))
                {
                    e.Cancel = true;
                    errorProvider.SetError(txtPassword, Messages.PasswordRequired);
                }
                else if (txtPassword.Text.Length < 6 || txtPassword.Text.Length > 15)
                {
                    e.Cancel = true;
                    errorProvider.SetError(txtPassword, Messages.PasswordLengthViolation);
                }
                else
                    errorProvider.SetError(txtPassword, null);
            }
            else
            {
                errorProvider.SetError(txtPassword, null);
            }
        }

        private void txtPassword_TextChanged(object sender, EventArgs e)
        {
            txtPassword_Validating(sender, new CancelEventArgs { });
        }

        private void txtUsername_EnabledChanged(object sender, EventArgs e)
        {
            if (!txtUsername.Enabled)
                txtUsername_Validating(sender, new CancelEventArgs { });
            
        }
        private void txtPassword_EnabledChanged(object sender, EventArgs e)
        {
            if (!txtPassword.Enabled)
                txtPassword_Validating(sender, new CancelEventArgs { });
        }
    }
}
